---
title: "PiGx: BS-seq"
output: 
  html_notebook: 
    toc:        TRUE
    toc_float:  TRUE
    theme:      "lumen"
    number_sections: FALSE
    code_folding: "hide"
    self_contained: TRUE
    includes:
      in_header: pigx_bsseq_logo.html
date: '`r format(as.POSIXct(if ("" != Sys.getenv("SOURCE_DATE_EPOCH")) { as.numeric(Sys.getenv("SOURCE_DATE_EPOCH")) } else { Sys.time() }, origin="1970-01-01"), "%Y-%m-%d %H:%M:%S")`'
bibliography: reports.bib
link-citations: yes
params:
  MethCall: TRUE
  Samplename: ''
  chrom_seqlengths: ''
  source_dir: ''
  out_dir:    ''
  inBam:    ''
  assembly: ''
  mincov:   10
  minqual:  20
  methCallRDS: ''
  Segmentation: TRUE
  methSegBed: ''
  methSegGR: ''
  methSegPng: ''
  AnnotateSegments: TRUE
  DiffMeth: TRUE
  methylDiff_files: list()
  genome_dir: ''
  scripts_dir: ''
  AnnotateDiffMeth: TRUE
  CpGfile:      ''
  refGenes_bedfile:   ''
  webfetch:     ''
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.height = 4.5, fig.width = 8,fig.show="hold")
knitr::opts_knit$set(progress = FALSE)
```

```{r chunk_eval_options}
MethCall          <- params$MethCall
Segmentation      <- params$Segmentation
AnnotateSegments  <- params$AnnotateSegments

refGenes_bedfile        <- params$refGenes_bedfile
webfetch          <- params$webfetch


genome_dir   <- params$genome_dir
scripts_dir  <- params$scripts_dir

if(!MethCall) {
  Segmentation <- 
  AnnotateSegments <- 
    FALSE
}

if(!Segmentation) AnnotateSegments <- FALSE

```

# Final Report {-}


PiGx BSseq is a data-processing pipeline for bisulfite experiments; it automates the analysis of raw single-end or paired-end fastq reads, including quality control, trimming and alignment. The software also provides post-mapping analysis, such as differential-methylation detection, methylation segmentation, and annotation of such detected regions. 
It was first developed by the Akalin group at MDC in Berlin in 2017.

This report was generated with PiGx BSseq version @VERSION@.

The results were saved to the output directory listed in the following table; for the remainder of this report, this path will be referred to as '[out]'.
  
 
```{r Reporttoplevel_HEADER, eval=TRUE}

basic_paramsDesc <- c("Sample ID",
            "Source directory",
            "Output directory",
            "Reference genome assembly"
            )

basic_paramsValues <- c( params$Samplename,
             params$source_dir,
             params$out_dir, 
             params$assembly
             )

basic_inputParams <- data.frame(Parameters = basic_paramsDesc,
                          Values = basic_paramsValues,
                          stringsAsFactors = FALSE)
#params
#datatable(basic_inputParams,options = list(dom = 't'),rownames = FALSE)
knitr::kable(basic_inputParams)

```

```{r MethCallHeader, results='asis', eval=MethCall} 
cat('## Methylation Calling\n')
```

```{r MethCall.load_libraries, results='hide', include=FALSE, eval=MethCall}

  library("methylKit")
```

```{r MethCall.eval_params, eval=MethCall}

assembly  <- params$assembly
mincov    <- params$mincov
minqual   <- params$minqual
methCallRDS   <- params$methCallRDS
```

```{r MethCall.print_params_in, results='asis',eval=MethCall}
cat('### Parameters\n')

cat('**Input parameters:**\n')
```

```{r MethCall.print_params_in2, eval=MethCall}

paramsDesc <- c( "Bam file",
                 "Minimum Coverage",
                 "Minimim Mapping Quality")

paramsValues <- c( paste0("[out]/",params$inBam),
                   params$mincov,
                   params$minqual)

inputParams <- data.frame(Parameters = paramsDesc,
                          Values = paramsValues,
                          stringsAsFactors = FALSE)
#params
#datatable(inputParams,options = list(dom = 't'),rownames = FALSE)
knitr::kable(inputParams)
```

```{r MethCall.print_params_out, results='asis',eval=MethCall}
cat('**Output parameters:**\n')
```

```{r MethCall.print_params_out2, eval=MethCall}

inputParams <- data.frame(Parameters = "MethylRaw Object",
                          Values      = gsub( params$out_dir, "[out]",  params$methCallRDS),
                          stringsAsFactors = FALSE)
#params
#datatable(inputParams,options = list(dom = 't'),rownames = FALSE)
knitr::kable(inputParams)
```

```{r MethCallDescription, results='asis', eval=MethCall} 
cat('### Extract Methylation Calls \n')

cat('We first extract the methylation calls from the sequence alignment produced by the bisulfite mapper [Bismark](https://www.bioinformatics.babraham.ac.uk/projects/bismark/) [@krueger_bismark:_2011] using the `processBismarkAln()` function of [methylKit](https://bioconductor.org/packages/release/bioc/html/methylKit.html) [@methylKit2012] --a package for the  analysis of DNA methylation profiles. 
We apply filters based on a minimum coverage of ',mincov,' and a mapping quality of at least ',minqual,', as indicated in the parameters table.\n')

cat('Here we show some simple statistics related to the distribution of methylation and coverage in the sample.\n')
```

```{r MethCallPlots,  eval=MethCall, fig.width=16, fig.height=8}
  
    methRaw <- readRDS(methCallRDS)
    
    ## show some statistics of the data  
    par(mfrow = c(1,2))
    getMethylationStats(methRaw,plot = TRUE)
    getCoverageStats(methRaw,plot = TRUE)
    par(mfrow = c(1,1))
    
```



```{r Segmentation, results='asis', eval=Segmentation} 
cat('## Segmentation \n')
```

```{r Segmentation.eval_params, eval=Segmentation}
methCallRDS     <- params$methCallRDS
methSegBed      <- params$methSegBed
methSegGR       <- params$methSegGR
pngFile         <- params$methSegPng
pngFile_exists  <- file.exists(pngFile )
```

```{r SegmentationIntro, results='asis', eval=Segmentation} 
cat('Segmentation based on methylation provides a way to compress information on methylation at the base-pair level into regional resolution. This allows for the detection of regions with methylation patterns that might warrant further investigation.\n')
```

```{r Segmentation.load_libraries, results='hide', include=FALSE, eval=Segmentation}

  ## load methylKit
  library("methylKit")
  library("DT")
```

```{r Segmentation.print_params_in, results='asis', eval=Segmentation}
cat('### Parameters\n')

cat('**Input parameters:**\n')
```

```{r Segmentation.print_params_in2, eval=Segmentation}

inputParams <- data.frame(Parameters = "MethylRaw Object",
                          Values     = gsub( params$out_dir, "[out]",  methCallRDS),
                          stringsAsFactors = FALSE)
#params
#datatable(inputParams,options = list(dom = 't'),rownames = FALSE)
knitr::kable(inputParams)
```

```{r Segmentation.print_params_out, results='asis', eval=Segmentation}
cat('**Output parameters:**\n')
```

```{r Segmentation.print_params_out2, eval=Segmentation}

paramsDesc <- c("Segments (BED)",
                "Segments (GRanges)")

paramsValues <- c(methSegBed,
                  methSegGR)

inputParams <- data.frame(Parameters = paramsDesc,
                          Values     = gsub( params$out_dir, "[out]", paramsValues),
                          stringsAsFactors = FALSE)
#params
#datatable(inputParams,options = list(dom = 't'),rownames = FALSE)
knitr::kable(inputParams)
```

```{r SegmentationDescription, results='asis', eval=Segmentation} 
cat('### Segmentation of Methylation Profile\n')

cat('Segmentation of the methylation profile is done using the methSeg() function, where change-points in the genome-wide  signal are recorded and the genome is partitioned into regions between consecutive change-points. This approach is typically used in the detection of copy-number variation [@klambauer2012] but can be applied to methylome segmentation as well [@Wreczycka2017]. Here, the identified segments are further clustered based on their average methylation signal, using a mixture-modeling approach, which permits the detection of distinct regions inside the genome  [@Wreczycka2017].\n')
```

```{r SegmentationDiagnostics, results='asis', eval= pngFile_exists  }

cat('![Diagnostic Plot of the Segmentation](',pngFile,')')

```

```{r Segmentation_explain_lack_of_Diagnostics, results='asis', eval= !pngFile_exists  }

cat('For the given sample, there were insufficient segments detected to perform segmentation diagnostics on the methylation data. This can be an indication of insufficient coverage.')

```

```{r Segmentation.load_and_segment, eval=Segmentation}

    res.gr = readRDS(methSegGR)

    ## convert to data.frame
    res.df <- as.data.frame(res.gr)
    res.df$seg.mean <- round(res.df$seg.mean,digits = 3)

    ## show the regions
    datatable(res.df,
              extensions = 'Buttons', 
              options = list(
                dom = 'Bfrtip',
                buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
                scrollX = TRUE),
              caption = "Resulting Segments",
              rownames = FALSE)
```

```{r SegmentationExport, results='asis', eval=Segmentation}
cat('### Export to BED\n')

cat('We export the above regions to a *BED* file, which can be loaded into any genome browser (such as [IGV](http://software.broadinstitute.org/software/igv/) or [UCSC](https://genome.ucsc.edu/) ) to allow for further analysis, annotation and visualisation.\n')
```



```{r AnnotateSegmentsHeader, results='asis', eval=AnnotateSegments}
cat('## Annotation of Segments\n')

cat('The annotation of the identified regions with genomic features allows a better understanding and characterization of detected regions.\n')
```

```{r AnnotateSegments.load_libraries, results='hide', include=FALSE, eval=AnnotateSegments}

    library("genomation")
    library("GenomicRanges")

```

```{r AnnotateSegments.print_params_in, results="asis", eval=AnnotateSegments}
cat('### Parameters\n')

cat('**Input parameters:**\n')
```

```{r AnnotateSegments.print_params_in2, eval=AnnotateSegments}

paramsDesc <- c("Segments (GRanges)",
                "Genome Assembly")

paramsValues <- c(params$methSegGR,
                  params$assembly)

inputParams <- data.frame(Parameters =  paramsDesc,
                          Values     =  gsub( params$out_dir, "[out]", paramsValues),
                          stringsAsFactors = FALSE)
#params
#datatable(inputParams,options = list(dom = 't'),rownames = FALSE)
knitr::kable(inputParams)
```

```{r AnnotateSegmentsDescription, results='asis',eval=AnnotateSegments}



cat('### Preprocessing\n')

cat('Pigx first searches for a reference gene set for the given genome assembly in the path specified in the settings file. Upon failure to find such a file in this location, Pigx allows the user to query the UCSC table browser directly to fetch the reference gene set using the [rtracklayer](http://bioconductor.org/packages/release/bioc/html/rtracklayer.html) Package [@rtracklayer2009], when the option `webfetch` is set to `True`. When this option is set to `False`, and the reference gene files are not found, the corresponding sections are simply omitted from this report. 

Upon acquiring the reference genes, we can determine different features intrinsic to each gene, such as promoter, exon or intron using the `readTranscriptFeatures()` function from [genomation](http://bioinformatics.mdc-berlin.de/genomation/) [@genomation2014] and appropriately for CpG islands and shores.\n')
```

```{r AnnotateSegments.annotation, results='asis', eval=AnnotateSegments}
cat('### Annotation\n')

cat('Regionally (de-)methylated segments can now be compared with gene features.\n')
```

```{r AnnotateSegments.fetchRefgene, eval=AnnotateSegments}
originally_present_refgen = file.exists(refGenes_bedfile)
source(paste0(scripts_dir, "fetch_procedures.R"))
fetched.refgenes <- lookupBedFile(type      = "refGene",
                                  filename  = refGenes_bedfile,
                                  assembly  = assembly,
                                  webfetch  = webfetch )
fetch_refgen_success <- ( fetched.refgenes != '')
```

```{r AnnotateSegments.readRefGene, eval=AnnotateSegments}

## now we parse the gene features
if( fetch_refgen_success ) {
  print( paste( "In this run, the reference gene set was obtained with webfetch =", webfetch) )
  if( !webfetch )
    {print("This implies that the bed file was found locally.") }
  if( webfetch && !originally_present_refgen)
    { print("Downloaded from remote server.") }
  refgenes.grl <- readTranscriptFeatures(fetched.refgenes)
  } else { 
  print( paste(" Failed to find Reference gene file ", refGenes_bedfile, ", with webfetch =", webfetch, "; this section omitted.") )  
  }
```

```{r AnnotateSegments.loadSegments, eval=AnnotateSegments}

# now load segments 
segments.gr <- readBed(file = methSegBed,
                      track.line = "auto")

# split according
segments.grl <- GenomicRanges::split(x = segments.gr,f = segments.gr$name)

# and detect overlaps 

if( fetch_refgen_success )
  { 
  annot.gene.list <- annotateWithGeneParts(target = segments.grl,
                                           feature = refgenes.grl,
                                           intersect.chr = TRUE)
  }
```

```{r AnnotateSegments.text2, results='asis', eval=AnnotateSegments}
cat('Here, we plot the average methylation per segment group and the overlap with gene features.\n')
```

```{r AnnotateSegments.plot,  eval=AnnotateSegments}
## percentage of target features overlapping with annotation:
## (with promoter > exon > intron precedence)
if( fetch_refgen_success )
  { 
  annot.gene.mat <- as.matrix(sapply(annot.gene.list, function(x) x@precedence))
  }

  par(mfrow=c(1,2))
boxplot(sapply(split(x = segments.gr,f = segments.gr$name),FUN = function(x) x$score),
        ylab = "Methylation (%)",
        xlab = "Segment")

if( fetch_refgen_success )
  { 
  # plot the target overlap for each segemnt type
  # barplot(annot.gene.mat,legend.text = TRUE)
  barplot(annot.gene.mat,
          ylab = "Overlap (%)",
          xlab = "Segment")
  legend("bottomright",legend = rownames(annot.gene.mat),fill = grey(seq.int(0,1,length.out = ncol(annot.gene.mat))))
  }

```

## Session Information

```{r SessionInfo}
sessionInfo()
```

## References
