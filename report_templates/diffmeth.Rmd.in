---
title: "PiGx: BS-seq"
output: 
  html_notebook: 
    toc:        TRUE
    toc_float:  TRUE
    theme:      "lumen"
    number_sections: FALSE
    code_folding: "hide"
    self_contained: TRUE
    includes:
      in_header: pigx_bsseq_logo.html
date: '`r format(as.POSIXct(if ("" != Sys.getenv("SOURCE_DATE_EPOCH")) { as.numeric(Sys.getenv("SOURCE_DATE_EPOCH")) } else { Sys.time() }, origin="1970-01-01"), "%Y-%m-%d %H:%M:%S")`'
bibliography: reports.bib
link-citations: yes
params:
  MethCall: TRUE
  Samplename: ''
  chrom_seqlengths: ''
  source_dir: ''
  out_dir:    ''
  diffmeth_dir: ''
  inBam:    ''
  assembly: ''
  DiffMeth: TRUE
  methylDiff_files: list()
  genome_dir: ''
  scripts_dir: ''
  AnnotateDiffMeth: TRUE
  CpGfile:      ''
  refGenfile:   ''
  webfetch:     ''
  treatment: ''
---

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.height = 4.5, fig.width = 8,fig.show="hold")
knitr::opts_knit$set(progress = FALSE)
```


```{r chunk_eval_options}

DiffMeth          <- params$DiffMeth
AnnotateDiffMeth  <- params$AnnotateDiffMeth

CpGfile           <- params$CpGfile
refGenfile        <- params$refGenfile
webfetch          <- params$webfetch
chrom_seqlengths <- params$chrom_seqlengths

genome_dir   <- params$genome_dir
scripts_dir  <- params$scripts_dir
out_dir <- params$out_dir

if(!DiffMeth) AnnotateDiffMeth <- FALSE
```

# Differential Methylation Report {-}



```{r DiffMeth.load_libraries, results='hide', include=FALSE, eval=DiffMeth}

## load libraries
library("methylKit")
library("DT")
library("jsonlite")

```

```{r DiffMeth.check_params, eval=DiffMeth}
if(!length(params$methylDiff_files) == 0 ) {
    methylDiff_files   <- params$methylDiff_files
} else {
    DiffMeth = FALSE
    AnnotateDiffMeth = FALSE
}
```

```{r DiffMethHeader, results='asis', eval=DiffMeth}
cat('## Calling Differentially Methylated Cytosines\n')

cat('For each set of samples specified in a treatment vector from the settings file, the ratio of methylation is calculated across the genome. Logistic regression is then applied to model the log-odds of observing this ratio, by chance, in any given location (p-value) as well as the probability of observing *somewhere* within the genome (q-value). The resulting probabilities are then tabulated below.\n')

cat('After q-value calculation, differentially methylated bases are extracted based on q-value and percent methylation difference cutoffs. Here we select bases that have q-value < 0.01 and percent methylation difference larger than 25%. Futhermore, we calculate hyper-methylated or hypo-methylated bases.\n')

cat('Overdispersion occurs when there is more variability in the data than assumed by the distribution and is here included in the differentially methylatation calculation.\n')

cat('For more details about `calculateDiffMeth()` and `getMethylDiff()` functions see [@methylKit2012] and for details about
the logistic regression and overdispersion see [@Wreczycka2017].\n')
```

```{r DiffMeth.eval_params, eval=DiffMeth}
treatmentpair = params$treatment
assembly = params$assembly

outputdir = paste(params$out_dir, params$diffmeth_dir, sep="/")
methylDiff_file    <- paste0(outputdir, treatmentpair,'.sorted_diffmeth.RDS')
methylDiff_hyper_file    <- paste0(outputdir, treatmentpair,'.sorted_diffmethhyper.RDS')
methylDiff_hypo_file   <- paste0(outputdir, treatmentpair,'.sorted_diffmethhypo.RDS')
methylDiffBed    <- paste0(outputdir, treatmentpair,'.sorted_diffmeth.bed')
```

```{r DiffMeth.load, eval=DiffMeth}
methylDiff.obj <- readRDS(methylDiff_file)
methylDiff.obj.hypo <- readRDS(methylDiff_hypo_file)
methylDiff.obj.hyper <- readRDS(methylDiff_hyper_file)

sampleids <- methylDiff.obj@sample.ids
treatment <- getTreatment(methylDiff.obj)

################################################################ fake diff meh cytosines START
library(methylKit)
file.list=list( system.file("extdata", 
                            "test1.myCpG.txt", package = "methylKit"),
                system.file("extdata", 
                            "control2.myCpG.txt", package = "methylKit") )
# read the files to a methylRawList object: myobj
myobj=methRead(file.list,
           sample.id=list("test1","ctrl1"),
           assembly="hg18",
           treatment=c(1,0),
           context="CpG"
           )
meth=unite(myobj, destrand=FALSE)
myDiff=calculateDiffMeth(meth)

methylDiff.obj <- myDiff
methylDiff.obj.hypo <- myDiff
methylDiff.obj.hyper <- myDiff
################################################################ fake diff meh cytosines END

```

```{r DiffMeth.print_params_in, results='asis', eval=DiffMeth}
cat('### Parameters\n')

cat('**Input parameters:**\n')
```

```{r DiffMeth.print_params_in2, eval=DiffMeth}

inputParams <- data.frame(Sample.id=sampleids,
                          Treatment=treatment,
                          Assembly=assembly,
                          stringsAsFactors = FALSE)

knitr::kable(inputParams)

```

```{r DiffMeth.print_params_out, results='asis', eval=DiffMeth}
cat('**Output parameters:**\n')
```

```{r DiffMeth.print_params_out2, eval=DiffMeth}

paramsDesc   <- c("BEDfile", "RDSfile (diff. methyl. Cs)","RDSfile_hyper (hyper-methyl. Cs)","RDSfile_hypo (hypo-methyl. Cs)")
paramsValues <-  gsub( out_dir, "[out]", c(methylDiffBed, methylDiff_file, methylDiff_hyper_file, methylDiff_hypo_file) )
outputParams <- data.frame(Parameters = paramsDesc,
                          Values = paramsValues,
                          stringsAsFactors = FALSE)
knitr::kable(outputParams)

```

```{r DiffMeth.check_content, results='asis' ,eval=DiffMeth}
# Check if there are some differentially methylated cytosines
methylDiff.nonempty = nrow(methylDiff.obj)>1
if(!methylDiff.nonempty) {
  cat('**No differentially methylated cytosines were observed.**\n')
  DiffMeth <- FALSE
  AnnotateDiffMeth <- FALSE
}
```

```{r DiffMeth.calcDiffResults, results='asis', eval=DiffMeth}
cat('Here we show the results of the differential methylation analysis.\n')
```

<!-- ```{r DiffMeth.show_differential_methylation, eval=DiffMeth} -->

<!-- # Show differentially methylated cytosines in a table. -->

<!-- methylDiff2df_roundint = function(methylDiff.obj, roundval=4){ -->
<!--   df = as(methylDiff.obj, "data.frame") -->
<!--   df[,5:7] = round(df[,5:7], roundval) -->
<!--   return(df) -->
<!-- } -->
<!-- methylDiff_sort_top = function(x, top=50){ -->
<!--   x=x[order(x$meth.diff),] -->
<!--   x = x[1:min(top, nrow(x)),] -->
<!-- } -->
<!-- topc=50 -->

<!-- ## show top 50 differentially methylated regions -->
<!-- datatable(methylDiff_sort_top(methylDiff2df_roundint(methylDiff.obj), top=topc), -->
<!--               extensions = 'Buttons', -->
<!--               options = list( -->
<!--                 dom = 'Bfrtip', -->
<!--                 buttons = c('copy', 'csv', 'excel', 'pdf', 'print'), -->
<!--                 scrollX = TRUE), -->
<!--               caption = paste0("Top ",topc," differentially methylated cytosines"), -->
<!--               rownames = FALSE) -->
<!-- ## show top 50 hyper-methylated regions -->
<!-- datatable(methylDiff_sort_top(methylDiff2df_roundint(methylDiff.obj.hyper), top=topc), -->
<!--               extensions = 'Buttons', -->
<!--               options = list( -->
<!--                 dom = 'Bfrtip', -->
<!--                 buttons = c('copy', 'csv', 'excel', 'pdf', 'print'), -->
<!--                 scrollX = TRUE), -->
<!--               caption = paste0("Top ",topc," hyper-methylated cytosines"), -->
<!--               rownames = FALSE) -->
<!-- ## show top 50 hypo-methylated regions -->
<!-- datatable(methylDiff_sort_top(methylDiff2df_roundint(methylDiff.obj.hypo), top=topc), -->
<!--               extensions = 'Buttons', -->
<!--               options = list( -->
<!--                 dom = 'Bfrtip', -->
<!--                 buttons = c('copy', 'csv', 'excel', 'pdf', 'print'), -->
<!--                 scrollX = TRUE), -->
<!--               caption = paste0("Top ",topc," hypo-methylated cytosines"), -->
<!--               rownames = FALSE) -->

<!-- ``` -->

```{r DiffMeth.export, results='asis', eval=DiffMeth}

cat('### Export Differentially Methylated Cytosines\n')

cat('Finally we export the regions to a *BED* file, which can be loaded into any genome browser like [IGV](http://software.broadinstitute.org/software/igv/) or [UCSC](https://genome.ucsc.edu/) to allow for further analysis, annotation and visualisation.\n')
```



```{r AnnotateDiffMethHeader,results='asis', eval=AnnotateDiffMeth}
cat('## Annotation of Differentially Methylated Cytosines\n')
```

```{r AnnotateDiffMeth.load_libraries, eval=AnnotateDiffMeth}

    library("genomation")
    library("rtracklayer")
    library("DT")
    library("ggplot2")
```

```{r AnnotateDiffMeth.print_params_in, results='asis', eval=AnnotateDiffMeth}
cat('### Parameters\n')

cat('**Input parameters:**\n')
```

```{r AnnotateDiffMeth.print_params_in2, eval=AnnotateDiffMeth}

paramsDesc <- c("Input RDS Data (diff. methyl. Cs)",
                "Input RDS Data (hyper-methyl. Cs)",
                "Input RDS Data (hypo-methyl. Cs)",
                "Assembly")

paramsValues <-  c(gsub( out_dir, "[out]", c(methylDiff_file, methylDiff_hyper_file, methylDiff_hypo_file) ),
                   assembly)
inputParams <- data.frame(Parameters = paramsDesc,
                          Values = paramsValues,
                          stringsAsFactors = FALSE)

knitr::kable(inputParams)

```

```{r AnnotateDiffMeth.prepr, results='asis', eval=AnnotateDiffMeth}
cat('### Preprocessing\n')
```

```{r AnnotateDiffMeth.convert, eval=AnnotateDiffMeth}
# Convert a methylDiff object to a GRanges object
GRanges.diffmeth = as(methylDiff.obj, "GRanges")
GRanges.diffmeth.hypo = as(methylDiff.obj.hypo, "GRanges")
GRanges.diffmeth.hyper = as(methylDiff.obj.hyper, "GRanges")

```

```{r AnnotateDiffMethDescription, results='asis', eval=AnnotateDiffMeth}
cat('Annotation of differential methylation can also be performed, using the same reference reference gene set and CpG island locations specified in the Annotation section above.\n')
```

```{r AnnotateDiffMeth.annotate_with_refseq_genes, eval=AnnotateDiffMeth}
source(paste0(scripts_dir, "fetch_procedures.R"))
fetched.refgenes <- lookupBedFile(type      = "refGene",
                                  filename  = basename(refGenfile),
                                  dir       = genome_dir,
                                  assembly  = assembly,
                                  webfetch  = webfetch )
fetch_refgen_success <- ( fetched.refgenes != '')
saveRDS(list(paste0(genome_dir,"/",basename(refGenfile)),fetched.refgenes, CpGfile, genome_dir, out_dir), "~/tmp1.RDS")

fetched.cpgi <- lookupBedFile(type = "cpgIslandExt",
                              filename =  basename(CpGfile),
                              dir = genome_dir,
                              assembly = assembly,
                              webfetch = webfetch )

```

```{r AnnotateDiffMeth.num_of_dmcs_title, results='asis', eval=AnnotateDiffMeth}
cat('### Differentially Methylated Cytosines per Chromosome\n')
```

```{r AnnotateDiffMeth.num_of_dmcs, eval=AnnotateDiffMeth}

number.of.elements.per.chr = function(gr.obj, title){

  # Optional, if you want a genomic order of the chromosomes
  diffmeth.gr = sortSeqlevels(gr.obj)
  # Split into a GRangesList
  # where each element has all ranges for one chromosome
  diffmeth.gr.perchr = split(diffmeth.gr, seqnames(diffmeth.gr))
  el.chrs = elementNROWS(diffmeth.gr.perchr)

  df = data.frame(Chromosome=names(el.chrs), Number.diff.meth.bases=as.vector(el.chrs))
  colnames(df) = c("Chromosome", title)
  return(df)
}

# Show number of differentially methylated cytosines per chromosome
if(length(GRanges.diffmeth)!=0){
  stats.df = number.of.elements.per.chr(GRanges.diffmeth, title="Number of diff. meth. cytosines")
  knitr::kable(stats.df)
}

if(length(GRanges.diffmeth.hyper)!=0){
  stats.df.hyper = number.of.elements.per.chr(GRanges.diffmeth.hyper, title="Number of hypermethylated meth. cytosines")
  knitr::kable(stats.df.hyper)
}

if(length(GRanges.diffmeth.hypo)!=0){
  stats.df.hypo = number.of.elements.per.chr(GRanges.diffmeth.hypo, title="Number of hypomethylated meth. cytosines")
  knitr::kable(stats.df.hypo)
}
```

```{r AnnotateDiffMeth.annotation_descr,results='asis',eval=AnnotateDiffMeth}
cat('### Annotation\n')

cat('Show overlap percentage of differentially methylated bases with gene features, CpG islands and shores.\n')
```

```{r AnnotateDiffMeth.annotation,  eval=AnnotateDiffMeth}

if( (fetch_refgen_success) & length(GRanges.diffmeth)!=0){
  ## now we parse the gene features
  refgenes.grl <- readTranscriptFeatures(fetched.refgenes)

  annot.gene <- annotateWithGeneParts(target = GRanges.diffmeth,
                                         feature = refgenes.grl,
                                         intersect.chr = TRUE)

  # plot the target overlap for each
  genomation::plotTargetAnnotation(annot.gene,
                       main="Differential methylation annotation")
}

if( (fetched.cpgi != '') & length(GRanges.diffmeth)!=0){

  # read the shores and flanking regions and name the flanks as shores
  # and CpG islands as CpGi
  cpg.obj=readFeatureFlank(fetched.cpgi,
                           feature.flank.name=c("CpGi","shores"))
  #
  # convert methylDiff object to GRanges and annotate
  diffCpGann=annotateWithFeatureFlank(GRanges.diffmeth,
                                      cpg.obj$CpGi, cpg.obj$shores,
                                      feature.name="CpGi",flank.name="shores")

  # plot the target overlap for each
  genomation::plotTargetAnnotation(diffCpGann,
                       col=c("green","gray","white"),
                       main="Differential methylation annotation")
}


```

```{r AnnotateDiffMeth.plot_descr, results='asis', eval=AnnotateDiffMeth}
cat('### Distance to the nearest TSSs\n')

cat('Show the distance of differentially methylated cytosines to TSSs of the nearest genes.\n')
```

```{r AnnotateDiffMeth.plot, eval=AnnotateDiffMeth}

if( (fetch_refgen_success) & length(GRanges.diffmeth)!=0)
  {
  # Get distance to nearest TSS and gene id from AnnotationByGeneParts
  # target.row is the row number in diffmeth.gr
  assoTSS = getAssociationWithTSS(annot.gene)

  datatable(as.data.frame(assoTSS),
            extensions = 'Buttons',
            options = list(
              dom = 'Bfrtip',
              buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
              scrollX = TRUE),
            caption = "Distance to nearest TSS",
            rownames = FALSE)


  hist(assoTSS[,2], main="Distance to the nearest TSS", xlab="bp", ylab="Frequency", col="cornflowerblue")

  }


```

```{r AnnotateDiffMeth.overview_descr, results='asis', eval=AnnotateDiffMeth}
cat('### Overview of Hyper- and Hypo-Methylated CpGs Over the Genome\n')
```

```{r AnnotateDiffMeth.overview_plot, eval=AnnotateDiffMeth}

if(length(GRanges.diffmeth.hypo)>1 & length(GRanges.diffmeth.hyper)>1){

seqdat_temp    = read.csv(paste0(out_dir,"/",chrom_seqlengths), 
                          sep="\t", header=FALSE, stringsAsFactors=FALSE)
chr.len        = seqdat_temp[,2]
names(chr.len) = seqdat_temp[,1]

myseqinfo = Seqinfo(names(chr.len), seqlengths=chr.len, genome=assembly)
myseqinfo.st = keepStandardChromosomes(myseqinfo)

source(paste0(params$scripts_dir, "ideoDMC.R"))
ideoDMC_hyper_hypo(methylDiff.obj.hyper, methylDiff.obj.hypo, chrom.length = seqlengths( myseqinfo.st ),
       circos = FALSE, title = "Differential methylation", hyper.col = "magenta", hypo.col = "green")

}

```


## Session Information

```{r SessionInfo}
sessionInfo()
```

## References


