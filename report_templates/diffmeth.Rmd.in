---
title: "PiGx-BSseq: Differential Methylation Report"
author: "BIMSB Bioinformatics Platform"
date: '`r format(as.POSIXct(if ("" != Sys.getenv("SOURCE_DATE_EPOCH")) { as.numeric(Sys.getenv("SOURCE_DATE_EPOCH")) } else { Sys.time() }, origin="1970-01-01"), "%Y-%m-%d %H:%M:%S")`'
link-citations: yes
output:
  html_notebook:
      toc : TRUE
      depth : 2
      toc_float : TRUE
      theme : 'lumen'
      number_sections : TRUE
      code_folding : "hide"
      self_contained : TRUE
      bibliography : 'report_templates/reports.bib'
params:
  scripts_dir:            ''
  cpgIsland_bedfile:      ''
  refGenes_bedfile:       ''
  chrom_seqlengths:       ''
  qvalue:                 0.01
  difference:             25
  webfetch:               ''

  sampleids:              ''
  treatments:             ''
  assembly:               ''
  context:                ''
  destranded:             ''

  control_group:          ''
  treatment_group:        ''

  methylDiff_file:        ''
  methylBase_file:	      ''
  methylDiff_results_file: ''

  prefix:                 ''
  workdir:                ''
  logo:                   ''
---


<style>
#logo
{
    position: relative;
}
#logo img {
    /*position: relative;*/
    top: 25px;
    /*right: 0px;*/
    left: 50px;
    position: fixed;
    width: 125px;
    }
body
{
    position: absolute;
    top: 150px;
}
</style>

<div id="logo" align="top">
```{r echo=FALSE}
knitr::include_graphics(params$logo)
```
</div>

```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE, fig.height = 4.5, fig.width = 8, fig.show = "hold")
knitr::opts_knit$set(progress = FALSE)

## load libraries
library("methylKit")
library("DT")
library("genomation")
library("rtracklayer")
library("ggplot2")
library("ggrepel")
require("matrixStats")
require("data.table")
data.table::setDTthreads(8)

```

# Description 

PiGx BSseq performs differential methylation testing using _methylKit's_ ,`calculateDiffMeth()` function and produces this report. The report includes tables and figures summarizing similarities and differences between comparison groups as specified in the settings file. 

This report was generated with PiGx BSseq version @VERSION@.

```{r chunk_eval_options}

hyper.col <- "magenta"
hypo.col <- "darkolivegreen4"
nTop <- 1000

cpgIsland_bedfile       <- params$cpgIsland_bedfile
refGenes_bedfile        <- params$refGenes_bedfile
webfetch                <- tolower(params$webfetch) %in% c("true", "yes")
chrom_seqlengths_file   <- params$chrom_seqlengths

methylDiff_file <- params$methylDiff_file
methylBase_file <- params$methylBase_file
methylDiff_results_file <- params$methylDiff_results_file

qvalue <- as.numeric(params$qvalue)
difference <- as.numeric(params$difference)

scripts_dir  <- params$scripts_dir

sampleids     <- strsplit(params$sampleids, ",", fixed = FALSE, perl = FALSE, useBytes = FALSE)[[1]]
# split all treatment values, could be numeric or not
treatmentsStr  <- strsplit(params$treatments, ",", fixed = FALSE, perl = FALSE, useBytes = FALSE)[[1]]
# convert into named numeric vector
treatments <- as.numeric( as.factor( treatmentsStr ))
names(treatments) <- treatmentsStr

assembly  <- params$assembly
context <- params$context
destranded <- ifelse(tolower(params$destranded) %in% c("true","yes"),TRUE,FALSE)


control_group_str <- params$control_group
control_group <- strsplit(params$control_group, ",", fixed = FALSE, perl = FALSE, useBytes = FALSE)[[1]]
treatment_group_str <- params$treatment_group
treatment_group <- strsplit(params$treatment_group, ",", fixed = FALSE, perl = FALSE, useBytes = FALSE)[[1]]

if (length(control_group) > 0) {
  # reorganize samples into treatment and control groups 
  case_group <- ifelse(treatmentsStr %in% treatment_group,"Treatment","Control")
} else {
  # convert into named numeric vector
  case_group <- rep(length(treatmentsStr),"Treatment" )
}

prefix <-  params$prefix
workdir <- params$workdir

ExtractDiffMeth   <- TRUE
AnnotateDiffMeth  <- TRUE

if(! (all(file.exists(cpgIsland_bedfile,refGenes_bedfile)) | webfetch )) {
  AnnotateDiffMeth <- FALSE
}

#create a folder to save high quality images generated by the report script
imagesDir <- file.path(workdir, paste0(prefix, '_images'))
if(!dir.exists(imagesDir)) { 
  dir.create(path = imagesDir)
}

inputParameterDesc <- c('Control sample groups', 
                        'Treatment sample groups',
                        'Qvalue cutoff',
                        'Minimal Methylation Difference',
                        'United Samples Tabix file',
                        'DiffMeth Tabix file',
                        'Genome Assembly',
                        'Prefix for output files',
                        'Working directory'
                     )
inputParameterValues <- c(
    control_group_str,
    treatment_group_str,
    qvalue,
    difference,
    basename(methylDiff_file),
    basename(methylBase_file),
    assembly,
    prefix,
    workdir
)

inputSettings <- data.frame(parameters = inputParameterDesc,
                            values = inputParameterValues,
                            stringsAsFactors = FALSE)
DT::datatable(data = inputSettings,
              extensions = 'FixedColumns',
              options = list(fixedColumns = TRUE,
                         scrollX = TRUE,
                         pageLength = 9,
                         dom = 't'))

```

# Quality Control 


## Sample Clustering ( top `r nTop` most variable sites )


The first quality control should be to check wether the samples cluster in their respective groups, or wether there are some known or unknown batch effects that need to be considered for the following differential methylation analysis. This plot shows the result of a principle components analysis (PCA) based on the `r nTop` most variable cytosine sites. 

```{r pca_function}

#' Get Most Variable CpGs Percent Methylation
#'
#' This function extracts the top most variable 
#'
#' @param .object   can be a methylBase, methylBaseDB or 
#'   methylation matrix extracted by percMethylation()
#' @param file      path to file storing methylation matrix extracted by percMethylation()
#' @param nTop      number of top most variable sites
#' @param chunk.size  how big are the chunks to be processed (only relevant for methylBaseDB )
#'
#' @return methylation matrix ordered by variability
getMostVariableCpGs = function(.object=NULL, file=NULL, nTop=5000, chunk.size = 1e6){
    require(matrixStats)
    require(data.table)
    data.table::setDTthreads(8)
    
    if ( !is.null(.object) ) {
        if (class(.object) %in% c("methylBase","methylBaseDB") ) {
        meth.mat.dt <- as.data.table(percMethylation(.object,chunk.size = chunk.size))
        } else {
            meth.mat.dt = copy(as.data.table(.object))
        }
    } else if ( !is.null(file) & file.exists(file) )  {
        meth.mat.dt <- data.table::fread(file)
    }
    
    meth.mat.dt[, variance := rowVars(as.matrix(.SD))]
    ## fastest ordering method
    ## https://stackoverflow.com/questions/13685295/sort-a-data-table-fast-by-ascending-descending-order
    meth.mat.dt[, id := seq_len(nrow(meth.mat.dt))]
    setorder(meth.mat.dt, -variance)
    meth.mat.dt = meth.mat.dt[1:min(nrow(meth.mat.dt),nTop),] 
    meth.mat.dt[, `:=`(variance=NULL, id=NULL)]
    return(meth.mat.dt)
    
}
```



```{r DiffMeth.load_methylBaseDB}

# Read input files
methylBaseDB <- methylKit:::readMethylBaseDB(dbpath = methylBase_file,
                                    dbtype = "tabix",
                                    sample.ids = sampleids,
                                    assembly = assembly,
                                    context = context,
                                    resolution = "base",
                                    treatment = treatments,
                                    destranded = destranded)
                                    

topVar <- getMostVariableCpGs(methylBaseDB, nTop = nTop)
pca <- stats::prcomp(t(topVar), center = TRUE)
pcaSummary <- summary(pca)
df <- cbind(as.data.frame(pca$x), "Group" = treatmentsStr, "Case" = case_group)
df$SampleID <- row.names(df)

```



```{r DiffMeth.plotPCA}
for ( batch in c("Group","Case")) {

p <- ggplot(df, aes(x = PC1, y = PC2)) + 
    geom_point(aes_string(color = batch)) + 
    geom_label_repel(aes(label = SampleID), size = 3) +
    labs(x = paste0('PC1 (',round(pcaSummary$importance[2, 'PC1'] * 100, 1),'%)'), 
         y = paste0('PC2 (',round(pcaSummary$importance[2, 'PC2'] * 100, 1),'%)')) + 
    ggtitle(label = paste("PCA plot based on",nrow(topVar),"most variable", context," sites")) +
    theme_bw()

print(p)

ggsave(plot = p, filename = file.path(imagesDir,paste0(prefix,".pca.png")),
       width = 7,height = 6)
} 
       
```

# Differential Methylation Analysis

## Calling Differentially Methylated Cytosines

For each treatment vector specified in the  settings file, the ratio of methylation between the control (i.e. the first entry), and the treatment (i.e. the second entry) is calculated across the genome. Logistic regression is then applied to model the log-odds probability of observing this ratio, by chance, in any given location (p-value) as well as the probability of observing it *somewhere* within the genome (q-value). The resulting probabilities are then tabulated below.

After q-value calculation, differentially methylated bases are extracted based on q-value and percent methylation difference cutoffs. Here we select bases that have q-value < 0.01 and percent methylation difference larger than 25%. Futhermore, we calculate hyper-methylated or hypo-methylated bases.

Overdispersion occurs when there is more variability in the data than assumed by the distribution and is here included in the differentially methylatation calculation.

For more details about `calculateDiffMeth()` and `getMethylDiff()` functions see [methylKit](https://bioconductor.org/packages/release/bioc/html/methylKit.html) and for details about
the logistic regression and overdispersion see [Wreczycka, et al (2017)](https://www.sciencedirect.com/science/article/pii/S0168165617315936).

The full table of methylKit calculateDiffMeth() results can be found at:

- **methylKit calculateDiffMeth results file**:
`r methylDiff_results_file`


```{r DiffMeth.load_methylDB, message=TRUE}


if (!setequal(control_group,treatment_group)) {
  message("Remapping Treatments Descriptions into treatment and control groups.")
  # reorganize samples into treatment and control groups 
  treatments_cmp <- ifelse(treatmentsStr %in% treatment_group,1,0)
  
  message("Control group (0): ", paste0(control_group,collapse = ", "))
  message("Treatment group (1): ", paste0(treatment_group,collapse = ", "))
} else {
  message("Remapping Treatment Description to number.")
  # convert into named numeric vector
  treatments_cmp <- as.numeric( as.factor( treatmentsStr ))
  names(treatments_cmp) <- treatmentsStr
  
  message(paste(sort(unique(treatmentsStr)),
                sort(unique(treatments_cmp)), 
                sep = ": ",collapse = "\n"))
  
}


methylDiffDB <- methylKit:::readMethylDiffDB(dbpath = methylDiff_file,
                                    dbtype = "tabix",
                                    sample.ids = sampleids,
                                    assembly = assembly,
                                    context = context,
                                    resolution = "base",
                                    treatment = treatments_cmp,
                                    destranded = destranded)

# Get differentially methylated bases based on cutoffs  
methylDiff.obj.all <- getMethylDiff(.Object = methylDiffDB, 
									difference=difference,
									type="all",
									qvalue = qvalue,
									save.db = FALSE)

# Check if there are some differentially methylated cytosines
if (! nrow(methylDiff.obj.all)>1 ) {
	cat("\n**There are no differentially methylated cytosines.**")
	ExtractDiffMeth <- FALSE
	AnnotateDiffMeth <- FALSE
  }

```

```{r DiffMeth.export_text, results='asis', eval=ExtractDiffMeth}
cat('### Export Differentially Methylated Cytosines\n\n')

cat('We export differentially-methylated CpG sites (DMC) to a *BED* file; it can be loaded into a genome browser such as [IGV](http://software.broadinstitute.org/software/igv/) or [UCSC](https://genome.ucsc.edu/) to allow for further analysis, annotation and visualisation.\n\n')

cat('- **DmC BED file**:\n',file.path(workdir,paste0(prefix,".dmc.bed")),'\n')

```

```{r Diffmeth.extract, eval=ExtractDiffMeth}

# Get hyper-methylated
methylDiff.obj.hyper <- getMethylDiff(.Object = methylDiff.obj.all,
									  difference = difference,
									  type = "hyper",
									  qvalue = qvalue)
# Get hypo-methylated
methylDiff.obj.hypo <- getMethylDiff(.Object = methylDiff.obj.all,
									 difference = difference,
									 type = "hypo",
									 qvalue=qvalue)

```


```{r DiffMeth.export, eval=ExtractDiffMeth, echo=FALSE}

#-------------------------------------------------------------------
#' Export windows to a BED file
#'
#' The windows are color coded based on their score (methylation or differential
#' methylation value).
#'
#' @param windows \code{\link[GenomicRanges]{GRanges}} object with information about
#' differentially methylated regions
#' @param filename name of the output data
#' @param trackLine UCSC browser trackline
#' @param colramp color scale to be used in the BED display
#' defaults to gray,green, darkgreen scale.
#'
#' @return A BED files with the differentially methylated regions
#' which can be visualized in the UCSC browser
#'
#' @seealso \code{\link{methylKit::methSeg2bed}}
#'
#' @export
#' @docType methods
#' @rdname meth2bed
meth2bed<-function(windows,filename,
                   trackLine="track name='meth windows' description='meth windows' itemRgb=On",
                   colramp=colorRamp(c("gray","green", "darkgreen"))
){
  require(rtracklayer)

  range01 <- function(x){(x-min(x)+1)/(max(x)-min(x)+1)}

  if(class(windows)!="GRanges"){
    windows=as(windows, "GRanges")
  }

  ## case if only one line is exported
  if(is.null(colramp) | length(windows)==1){
    trackLine <- gsub(pattern = "itemRgb=On",replacement = "",x = trackLine)
  } else {
    ramp <- colramp
    score(windows)=range01(windows$meth.diff)
    mcols(windows)$itemRgb= rgb(ramp(score(windows)), maxColorValue = 255)
  }

  strand(windows)="*"
  score(windows)=range01(windows$meth.diff)

  if(is.null(trackLine)){

    export.bed(windows,filename)
  }else{
    export.bed(windows,filename,
               trackLine=as(trackLine, "BasicTrackLine"))
  }
}


# Export differentially methylated cytosines to a bed file
trackLine = paste0("track name='differentially methylated cytosines ' ",
                   "description='diff. meth. between ",
                   treatment_group_str, "and", control_group_str,
                   "' itemRgb=On")

bedFile <- file.path(workdir,paste0(prefix,".dmc.bed"))
meth2bed(windows = methylDiff.obj.all,
         trackLine=trackLine,
         colramp=colorRamp(c("gray","green", "darkgreen")),
         filename = bedFile) 
```




```{r AnnotateDiffMethHeader,results='asis', eval=ExtractDiffMeth}
cat('## Annotation of Differentially Methylated Cytosines\n\n')

cat('Once differentially-methylated CpG sites (DMC) have been found, the sites are classified into hyper- and hypo-methylated sites, based on two cutoffs: the minimal  methylation difference and the qvalue cutoff as shown in the parameter table. Hypermethylation indicates increasingly-methylated sites, while hypomethylation indicates lowered methylation when performing the comparison of treatment - control.\n\n')
```

```{r AnnotateDiffMeth.prepSeqinfo, eval=ExtractDiffMeth}
chrom_seqlengths <- read.delim(chrom_seqlengths_file,
                               header = FALSE, stringsAsFactors = FALSE)

myseqinfo <- Seqinfo(seqnames = chrom_seqlengths[,1], 
                     seqlengths = chrom_seqlengths[,2], 
                     genome = assembly)
myseqinfo = keepStandardChromosomes(myseqinfo)
myseqinfo <- sortSeqlevels(myseqinfo)

```


```{r AnnotateDiffMeth.convert, eval=ExtractDiffMeth}
# Convert a methylDiff object to a GRanges object
GRanges.diffmeth    = as(methylDiff.obj.all, "GRanges")
GRanges.diffmeth <- sortSeqlevels(GRanges.diffmeth)
# subset to all available chromosomes
seqlevels(myseqinfo) <- seqlevels(GRanges.diffmeth)
seqinfo(GRanges.diffmeth) <- myseqinfo

GRanges.diffmeth.hyper  = as(methylDiff.obj.hyper, "GRanges")
GRanges.diffmeth.hyper <- sortSeqlevels(GRanges.diffmeth.hyper)

GRanges.diffmeth.hypo   = as(methylDiff.obj.hypo, "GRanges")
GRanges.diffmeth.hypo <- sortSeqlevels(GRanges.diffmeth.hypo)
# GRanges.diffmeth.nonsig = as(methylDiff.obj.nonsig, "GRanges")
```

```{r AnnotateDiffMeth.overview_descr, results='asis', eval=ExtractDiffMeth}

if(length(GRanges.diffmeth.hypo)>1 & length(GRanges.diffmeth.hyper)>1){
  
cat('### Overview of Hyper- and Hypo-Methylated CpGs Over the Genome\n\n')
  
cat('This chromosome ideogram represents differential methylation, where only CpGs fulfilling the cutoffs of q-value < ', qvalue ,' and methylation difference of at least ', difference,'% are shown.\n' )
  
}
```

```{r AnnotateDiffMeth.overview_plot, eval=ExtractDiffMeth, echo=FALSE, message=FALSE, warning=FALSE,fig.width= 8, fig.height=10}

if(length(GRanges.diffmeth.hypo)>1 & length(GRanges.diffmeth.hyper)>1){

source(file.path(params$scripts_dir, "ideoDMC.R"))
ideoDMC_hyper_hypo(methylDiff.obj.hyper, 
                   methylDiff.obj.hypo, 
                   chrom.length = seqlengths( sortSeqlevels(myseqinfo) ),
                   circos = FALSE, 
                   title = "Genome Wide Differential Methylation", 
                   hyper.col = hyper.col, hypo.col = hypo.col) + theme_classic()

}

```

```{r AnnotateDiffMeth.num_of_dmcs_title, results='asis', eval=ExtractDiffMeth}
cat('#### Fraction of Differentially Methylated Cytosines per Chromosome\n\n')

cat('These stacked barplots visualize the percentages of hyper and hypomethylated DMCs out of all covered CpGs for each chromosome.\n\n')
```

```{r AnnotateDiffMeth.num_of_dmcs, eval=ExtractDiffMeth,fig.height=10}
# Get number of differentially methylated cytosines per chromosome
stats.perChr <- diffMethPerChr(methylDiffDB,plot = FALSE)$diffMeth.per.chr

stats.df <- reshape2::melt(stats.perChr,
               measure.vars = c("number.of.hypermethylated",
                                "number.of.hypomethylated"),
               id.vars = "chr",
               value.name = "count")
levels(stats.df$chr) <- unique(stats.df$chr)
stats.df$perc <- reshape2::melt(stats.perChr,
               measure.vars = c("percentage.of.hypermethylated",
                                "percentage.of.hypomethylated"),
               id.vars = "chr",
               value.name = "percentage")[,"percentage"]

stats.df$variable <- factor(gsub("number.of.","",stats.df$variable),
                            levels = c("hypomethylated","hypermethylated"))
```


```{r AnnotateDiffMeth.num_of_dmcs.plot, eval=ExtractDiffMeth,fig.width=8,fig.height=8}
p <- ggplot(stats.df, aes(x = chr, y = perc, fill = variable)) + 
  scale_fill_manual(values = c(hypo.col,hyper.col)) +
  geom_bar(stat = "identity",position = "stack", color = "black") +
  geom_text_repel(aes(label = count), position = position_stack(vjust = 0.5),
            hjust = 0.1,size = 5) +
  ggtitle(label = "Differentially methylated Cytosines per Chromosome") +
  labs(y = "Percentage", x = "Chromosome") + 
  coord_flip() +
  theme_bw() +
  theme(legend.position = "bottom", legend.title = element_blank())

print(p)
```

```{r AnnotateDiffMeth.num_of_dmcs_title2, results='asis', eval=ExtractDiffMeth}
cat('These stacked barplots visualize the percentages of hyper and hypomethylated DMCs out of all detected differential CpGs for each chromosome.\n\n')
```

```{r AnnotateDiffMeth.num_of_dmcs.plot2, eval=ExtractDiffMeth,fig.width=8,fig.height=8}
# Get number of differentially methylated cytosines per chromosome
stats.DMC.perChr <- diffMethPerChr(methylDiff.obj.all,plot = FALSE)$diffMeth.per.chr

stats.DMC.df <- reshape2::melt(stats.DMC.perChr,
               measure.vars = c("number.of.hypermethylated",
                                "number.of.hypomethylated"),
               id.vars = "chr",
               value.name = "count")
levels(stats.DMC.df$chr) <- unique(stats.DMC.df$chr)
stats.DMC.df$perc <- reshape2::melt(stats.DMC.perChr,
               measure.vars = c("percentage.of.hypermethylated",
                                "percentage.of.hypomethylated"),
               id.vars = "chr",
               value.name = "percentage")[,"percentage"]

stats.DMC.df$variable <- factor(gsub("number.of.","",stats.DMC.df$variable),
                            levels = c("hypomethylated","hypermethylated"))

p <- ggplot(stats.DMC.df, aes(x = chr, y = perc, fill = variable)) + 
  scale_fill_manual(values = c(hypo.col,hyper.col)) +
  geom_bar(stat = "identity",position = "stack", color = "black") +
  geom_text_repel(aes(label = count), position = position_stack(vjust = 0.5),
            hjust = 0.1,size = 5) +
  ggtitle(label = "Differentially methylated Cytosines per Chromosome") +
  labs(y = "Percentage", x = "Chromosome") + 
  coord_flip() +
  theme_bw() +
  theme(legend.position = "bottom", legend.title = element_blank())

print(p)
```

```{r AnnotateDiffMeth.annotate_with_refseq_genes, eval=AnnotateDiffMeth}
source(file.path(scripts_dir, "fetch_procedures.R"))
fetched.refgenes <- lookupBedFile(type = "knownGene",
                               filename = refGenes_bedfile,
                               assembly = assembly,
                               webfetch = webfetch )
fetch_refgen_success <- !is.null(fetched.refgenes)
fetched.cpgi <- lookupBedFile(type = "cpgIslandExt",
                              filename =  cpgIsland_bedfile,
                              assembly = assembly,
                              webfetch = webfetch )

fetch_cpgi_success <- !is.null(fetched.cpgi)

```

```{r AnnotateDiffMeth.annotateWithGeneParts,  eval=AnnotateDiffMeth, echo=FALSE, message=FALSE, results='asis'}
if( (fetch_refgen_success) & length(GRanges.diffmeth)!=0){
  ## now we parse the gene features
  refgenes.grl <- readTranscriptFeatures(fetched.refgenes)

  annot.gene <- annotateWithGeneParts(target = GRanges.diffmeth,
                                         feature = refgenes.grl,
                                         intersect.chr = TRUE)
  
  if( length(GRanges.diffmeth.hypo)!=0 & length(GRanges.diffmeth.hyper)!=0){
  
  annot.gene.hyper <- annotateWithGeneParts(target = GRanges.diffmeth.hyper,
                                         feature = refgenes.grl,
                                         intersect.chr = TRUE)
  
  annot.gene.hypo <- annotateWithGeneParts(target = GRanges.diffmeth.hypo,
                                         feature = refgenes.grl,
                                         intersect.chr = TRUE)
  }
  

  cat('### Differentially Methylated Cytosines per Genomic Feature\n\n')
  
  cat('The distribution of differentially methylated cytosines over the genomic features is a good start to check hypothesis that could indicate possible effects on the gene expression level.\n\n')
  
}
```

```{r AnnotateDiffMeth.annotateWithGenePartsPlot1,  eval=AnnotateDiffMeth, echo=FALSE, results='asis'}
if( (fetch_refgen_success) & length(GRanges.diffmeth)!=0){
  
  cat('#### Piechart\n\n')
  # # plot the target overlap for each
  genomation::plotTargetAnnotation(annot.gene,
                       main="Differentially methylated Cytosines\nper Genomic Feature")
  
  cat('\n\n')
}

```


```{r AnnotateDiffMeth.annotateWithGenePartsPlot2,  eval=AnnotateDiffMeth, echo=FALSE, results='asis'}

if( (fetch_refgen_success) & length(GRanges.diffmeth)!=0){
  
  # construct dataframe for ggplot
  df <- reshape2::melt(getTargetAnnotationStats(annot.gene))
  df$variable <- factor(names(getTargetAnnotationStats(annot.gene)),
                        levels = rev(names(getTargetAnnotationStats(annot.gene))))
  df$count <- annot.gene@num.annotation
  
  cols <- getColors(length(getTargetAnnotationStats(annot.gene)))
  

  
  p <- ggplot(df, aes(x = variable, y = value, fill = variable)) + 
    scale_fill_manual(values = rev(cols)) +
    geom_bar(stat = "identity" ,color = "black", position = position_dodge()) +
    geom_text(aes(y = -10, label = count), hjust = 0,size = 5) +
    ggtitle(label = "Differentially methylated Cytosines per Genomic Feature") +
    labs(y = "Percentage", x = "Feature") + 
    coord_flip() +
    theme_bw() +
    guides(fill = guide_legend(reverse = TRUE)) +
    theme(legend.position = "bottom", legend.title = element_blank())  

  cat('#### Barchart\n\n')

  print(p)
  
  cat('\n\n')
  

}
```


```{r facet_strip_coloring, echo=FALSE}

fill_strip <- function(facet_ggplot, fills, plot=FALSE) {
  # extract gtable
  g <- ggplot_gtable(ggplot_build(facet_ggplot))
  # figure out facet strips
  strip_both <- which(grepl('strip-', g$layout$name))
  #
  
  if(! length(fills) == length(strip_both)) {
    stop("Length of colors (",length(fills),")",
         "does not match with number of strips (",
         length(strip_both),").")
  }
  
  k <- 1
  for (i in strip_both) {
  j <- which(grepl('rect', g$grobs[[i]]$grobs[[1]]$childrenOrder))
  g$grobs[[i]]$grobs[[1]]$children[[j]]$gp$fill <- fills[k]
  k <- k+1
  }
  
  if(plot) {
    grid.newpage(recording = FALSE)
    grid.draw(g)
  } 
  
  invisible(return(g))
  
}

```


```{r AnnotateDiffMeth.annotateWithGenePartsPlot3,  eval=AnnotateDiffMeth, echo=FALSE, results='asis'}
  if( length(GRanges.diffmeth.hypo)!=0 & length(GRanges.diffmeth.hyper)!=0){
  
    
    df <- reshape2::melt(cbind(getTargetAnnotationStats(annot.gene.hyper),
                               getTargetAnnotationStats(annot.gene.hypo)))
    names(df) <- c("variable","type","value")
    df$variable <- factor(df$variable,
                        levels = rev(names(getTargetAnnotationStats(annot.gene))))
    df$type <- factor(ifelse(df$type == 1,"hypermethylated","hypomethylated"),
                      levels = c("hypomethylated","hypermethylated"))
    df$count <- c(annot.gene.hyper@num.annotation,
                      annot.gene.hypo@num.annotation)
    
    p <- ggplot(df, aes(x = variable, y = value, fill = variable)) + 
      scale_fill_manual(values = rev(cols)) +
      geom_bar(mapping = aes(group = type), stat = "identity" ,color = "black",  position = position_dodge()) +
      geom_text(mapping = aes(group = type, color = type , y = -10, label = count), size = 5, 
                  position = position_dodge(width= 1)) +
      scale_color_manual(values = c(hypo.col,hyper.col)) + 
      ggtitle(label = "Differentially methylated Cytosines per Genomic Feature") +
      labs(y = "Percentage", x = "Feature") + 
      coord_flip() +
      theme_bw() +
      guides(fill = guide_legend(reverse = TRUE)) +
      theme(legend.position = "bottom", legend.title = element_blank(),
            legend.text = element_text(colour=c(rep(times = length(cols),"black"),
                                                c(hypo.col,hyper.col))))
      
    cat('#### Barchart (Split per DMC Type)\n\n')
    
    p <- p + facet_wrap( ~ type,nrow = 2)
    
    print(p)
    
    # png(filename = file.path(imagesDir,paste0(prefix,"DMCperGenomicFeat.type.png")),
    #        height = 4.5, width = 8)
    # g <- fill_strip(p, fills = rev(c(hypo.col,hyper.col)),plot = TRUE)
    # dev.off()
    # # ggsave(plot = g, filename = file.path(imagesDir,paste0(prefix,"DMCperGenomicFeat.type.png")),
    #        # width = 7,height = 6)
    # 
    # cat('![](',file.path(imagesDir,paste0(prefix,"DMCperGenomicFeat.type.png")),')')
    
    cat('\n\n')
  }
```


```{r AnnotateDiffMeth.annotateWithFeatureFlank,  eval=AnnotateDiffMeth, echo=FALSE, warning=FALSE, message=FALSE ,results='asis'}
if( (fetch_cpgi_success) & length(GRanges.diffmeth)!=0){

  # read the shores and flanking regions and name the flanks as shores
  # and CpG islands as CpGi
    cpg.obj=readFeatureFlank(fetched.cpgi,
                           feature.flank.name=c("CpGi","shores"))
  #
  # convert methylDiff object to GRanges and annotate
  diffCpGann=annotateWithFeatureFlank(target = GRanges.diffmeth,
                                      feature = cpg.obj$CpGi, 
                                      flank = cpg.obj$shores,
                                      feature.name="CpGi",flank.name="shores")
  
  if( length(GRanges.diffmeth.hypo)!=0 & length(GRanges.diffmeth.hyper)!=0){
    
      diffCpGann.hypo=annotateWithFeatureFlank(target = GRanges.diffmeth.hypo,
                                          feature = cpg.obj$CpGi, 
                                          flank = cpg.obj$shores,
                                          feature.name="CpGi",flank.name="shores")
      
      diffCpGann.hyper=annotateWithFeatureFlank(target = GRanges.diffmeth.hyper,
                                          feature = cpg.obj$CpGi, 
                                          flank = cpg.obj$shores,
                                          feature.name="CpGi",flank.name="shores")
  }

  
  cat('### Differentially Methylated Cytosines over CpG Islands\n\n')
  
    cat("CpG islands are genomic features of 200 to 2000 base pairs that have an increased CG base pair content and show abundant CpG sequences. A large fraction (~70%) of human promoters of a gene contain a CpG island ([Deaton, A. M., & Bird, A. (2011)](http://genesdev.cshlp.org/content/25/10/1010.short)). Silencing of genes is often achieved by methylation in CpG Islands, so observation of hypomethylation in CpG Islands could indicate effects on the expression of a gene.\n\n")


}
```


```{r AnnotateDiffMeth.annotateWithFeatureFlankPlot1,  eval=AnnotateDiffMeth, echo=FALSE, results='asis'}
if( (fetch_cpgi_success) & length(GRanges.diffmeth)!=0){

  cat('#### Piechart\n\n')  
  
  # plot the target overlap for each
  genomation::plotTargetAnnotation(diffCpGann,
                       col=c("green","gray","white"),
                       main="Differentially methylated Cytosines over CpG Islands\n")
  
  cat('\n\n')
}
```


```{r AnnotateDiffMeth.annotateWithFeatureFlankPlot2,  eval=AnnotateDiffMeth, echo=FALSE, results='asis'}

if( (fetch_cpgi_success) & length(GRanges.diffmeth)!=0){
    
  # construct dataframe for ggplot
  df <- reshape2::melt(getTargetAnnotationStats(diffCpGann))
  df$variable <- factor(names(getTargetAnnotationStats(diffCpGann)),
                        levels = rev(names(getTargetAnnotationStats(diffCpGann))))
  df$count <- diffCpGann@num.annotation
  
  p <- ggplot(df, aes(x = variable, y = value, fill = variable)) + 
  scale_fill_manual(values = c("white","gray","green")) +
  geom_bar(stat = "identity" ,color = "black", position = position_dodge()) +
    geom_text(aes(y = -10, label = count), hjust = 0,size = 5) +
  coord_flip() +
  labs(y = "Percentage", x = "Feature") + 
  ggtitle(label = "Differentially methylated Cytosines per CpG Island Feature") +
  theme_bw() +
  guides(fill = guide_legend(reverse = TRUE)) +
  theme(legend.position = "bottom", 
        legend.title = element_blank(),
        # axis.title.y = element_blank(), axis.ticks.y = element_blank(),
        # axis.text.y = element_blank()
        )

  cat('#### Barchart\n\n')

  print(p)
  
  cat('\n\n')
}

```

```{r AnnotateDiffMeth.annotateWithFeatureFlankPlot3,  eval=AnnotateDiffMeth, echo=FALSE, results='asis'}
  
if( length(GRanges.diffmeth.hypo)!=0 & length(GRanges.diffmeth.hyper)!=0){
    
  # construct dataframe for ggplot
  df <- reshape2::melt(cbind(getTargetAnnotationStats(diffCpGann.hyper),
                             getTargetAnnotationStats(diffCpGann.hypo)))
  names(df) <- c("variable","type","value")
  df$variable <- factor(df$variable,
                        levels = rev(names(getTargetAnnotationStats(diffCpGann))))
  df$type <- factor(ifelse(df$type == 1,"hypermethylated","hypomethylated"),
                    levels = c("hypomethylated","hypermethylated"))
  df$count <- c(diffCpGann.hyper@num.annotation,diffCpGann.hypo@num.annotation)
  
  
  p <- ggplot(df, aes(x = variable, y = value, fill = variable)) + 
  scale_fill_manual(values = c("white","gray","green")) +
  geom_bar(mapping = aes(group = type), stat = "identity" ,color = "black",  position = position_dodge()) +
  geom_text(mapping = aes(group = type, color = type , y = -10, label = count), size = 5, 
            position = position_dodge(width= 1)) +
  scale_color_manual(values = c(hypo.col,hyper.col)) +
  coord_flip() +
  labs(y = "Percentage", x = "Feature") + 
  ggtitle(label = "Differentially methylated Cytosines per CpG Island Feature") +
  theme_bw() +
  guides(fill = guide_legend(reverse = TRUE),color = FALSE) +
  theme(legend.position = "bottom", 
        legend.title = element_blank(),
        # axis.title.y = element_blank(), axis.ticks.y = element_blank(),
        # axis.text.y = element_blank()
        )

  cat('#### Barchart (Split per DMC Type)\n\n')

  p <- p + facet_wrap(~type, nrow = 2)
  
  print(p)
  
  cat('\n\n')
  
}

```

```{r AnnotateDiffMeth.annotateTSS,  eval=AnnotateDiffMeth, echo=FALSE,results='asis'}
if( (fetch_refgen_success) & length(GRanges.diffmeth)!=0){

  cat('### Distribution of differential methylation around TSS\n\n')
  
  cat("This histogram of differential CpG methylation show how far the different types of differentially methylated cytosines are distributed around the closest transcription start site of the nearest genes.\n\n")

}
```


```{r AnnotateDiffMeth.annotateTSSPlot,  eval=AnnotateDiffMeth, echo=FALSE}
if( (fetch_refgen_success) & length(GRanges.diffmeth)!=0)
  {
  # Get distance to nearest TSS and gene id from AnnotationByGeneParts
  # target.row is the row number in diffmeth.gr
  assoTSS = getAssociationWithTSS(annot.gene)

  assoTSS$dmc.type <- "hypermethylated" 
  assoTSS$dmc.type[ GRanges.diffmeth[assoTSS$target.row]$meth.diff < 0] <- "hypomethylated" 
  
  p <- ggplot(assoTSS, aes(x = dist.to.feature, fill = dmc.type)) +
    geom_histogram(color = "black", position = position_dodge()) +
    scale_fill_manual(values = c(hyper.col,hypo.col)) +
    labs(x="Base Pairs", y="Frequency" ) +
    ggtitle("Distance to the nearest TSS") + 
    theme_bw() +
    theme(legend.position = "bottom", 
          legend.title = element_blank(),
          )
  
  print(p)
  
  }

```



## Session Information

```{r SessionInfo}
sessionInfo()
```

