#!@PYTHON@

# PiGx -- Pipelines in Genomics
#
# Copyright © 2017, 2018 Bora Uyar <bora.uyar@mdc-berlin.de>
# Copyright © 2017, 2018 Jonathan Ronen <yablee@gmail.com>
# Copyright © 2017, 2018 Bren Osberg <brendan.osberg@mdc-berlin.de>
# Copyright © 2017, 2018 Alexander Gosdschan <alexander.gosdschan@mdc-berlin.de>
# Copyright © 2017, 2018 Katarzyna Wreczycka <katwre@gmail.com>
# Copyright © 2017, 2018 Altuna Akalin <altuna.akalin@mdc-berlin.de>
# Copyright © 2017, 2018 Ricardo Wurmus <ricardo.wurmus@mdc-berlin.de>
#
# This file is part of PiGx.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.




import os
import sys
import argparse
import shutil

description = """\
PiGx Pipelines.

PiGx is a collection of data processing pipelines.
"""

epilog = 'These pipelines were developed by the Akalin group at MDC in Berlin in 2017-2018.'

version = """\
PiGx Pipelines.
Version: @PACKAGE_VERSION@

Copyright © 2017, 2018 BIMSB Bioinformatics (Akalin Lab).
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.

This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
"""

def formatter(prog):
    return argparse.RawTextHelpFormatter(prog, max_help_position=80)

parser = argparse.ArgumentParser(description=description,
                                 epilog=epilog,
                                 formatter_class=formatter)

parser.add_argument('-v', '--version', action='version',
                    version=version)

parser.add_argument('pipeline',
                    help="""\
The pipeline to run.  The following pipelines are available:@pipelines@\
""")

parser.add_argument('arguments', nargs=argparse.REMAINDER,
                    help="""\
Arguments to the selected pipeline.  Run "pigx [pipeline] --help" to see
list of supported arguments.
""")

args = parser.parse_args()



if os.getenv('PIGX_PIPELINES_PATH'):
    pipeline_script = shutil.which("pigx-" + args.pipeline, path=os.getenv('PIGX_PIPELINES_PATH'))
else:
    scripts = {
        "bsseq"   : "@PIGX_BSSEQ@",
        "rnaseq"  : "@PIGX_RNASEQ@",
        "chipseq" : "@PIGX_CHIPSEQ@",
        "scrnaseq": "@PIGX_SCRNASEQ@",
        "crispr"  : "@PIGX_CRISPR@"
    }
    pipeline_script = scripts.get(args.pipeline)

pipelines = "@pipelines@".split()
if args.pipeline not in pipelines or not pipeline_script:
    print("Pipeline not available: {}\nTry setting PIGX_PIPELINES_PATH.".format(args.pipeline), file=sys.stderr)
    exit(1)

if os.path.isfile(pipeline_script) and os.access(pipeline_script, os.X_OK):
    # TODO: we're assuming that pipeline_script is a shell wrapper,
    # because that's what Guix does, but it could just as well be a
    # plain Python script.
    os.execv("@SHELL@", ["pigx", pipeline_script] + args.arguments)
else:
    print("Cannot execute {}.".format(pipeline_script), file=sys.stderr)
    exit(1)
