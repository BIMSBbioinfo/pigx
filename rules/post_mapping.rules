# Rules to be applied after mapping reads with Bismark

import os

## Bam processing
rule bam_methCall:
    input:
        template    = DIR_templates + "methCall.report.Rmd",
        bamfile     = DIR_sorted  + "{prefix}.sorted.bam"
    output:
        report      = DIR_methcall + "{prefix}.sorted_meth_calls.nb.html",
        rdsfile     = DIR_methcall + "{prefix}.sorted_methylRaw.RDS",
        callFile    = DIR_methcall + "{prefix}.sorted_CpG.txt",
        knitr_meta  = touch(DIR_final + "{prefix}/knitr_meta_notuse.rds")
    params:
        ## absolute path to bamfiles
        inBam       = WORKDIR + DIR_sorted + "{prefix}.sorted.bam",
        assembly    = config['general']['genome-version'],
        mincov      = int(config['general']['methylation-calling']['minimum-coverage']),
        minqual     = int(config['general']['methylation-calling']['minimum-quality']),
        ## absolute path to output folder in working dir
        rds       = WORKDIR + DIR_methcall + "{prefix}.sorted_methylRaw.RDS"
    log:
        DIR_methcall + "{prefix}.sorted_meth_calls.log"
    message:
        "Processing bam file:\n"
        "   input     : {input.bamfile}" + "\n"
        "Generating:"+ "\n" 
        "   report    : {output.report}" + "\n" 
        "   rds     : {output.rdsfile}" + "\n" 
        "   methCalls : {output.callFile}"
    shell:
        "{RSCRIPT} {DIR_scripts}/report_functions.R" +
                  " --reportFile={input.template}" +
                  " --outFile={output.report}" +
                  " --outDir="+ DIR_methcall  +
                  " --finalReportDir="+DIR_final+"{wildcards.prefix}" + 
                  " --report.params='inBam:{params.inBam};assembly:{params.assembly};mincov:{params.mincov};minqual:{params.minqual};rds:{params.rds}'" +
                  " --logFile={log}" 




## Segmentation
rule methseg:
    ## paths inside input and output should be relative
    input:
        template    = DIR_templates + "methseg.report.Rmd",
        rdsfile     = DIR_methcall + "{prefix}.sorted_methylRaw.RDS"
    output: 
        report      = DIR_seg + "{prefix}.sorted_meth_segments.nb.html",
        grfile      = DIR_seg + "{prefix}.sorted_meth_segments_gr.RDS",
        bedfile     = DIR_seg + "{prefix}.sorted_meth_segments.bed",
        knitr_meta  = touch(DIR_final + "{prefix}/knitr_meta_notuse.rds")
    params:
        rds       = WORKDIR + DIR_methcall + "{prefix}.sorted_methylRaw.RDS",
        grds      = WORKDIR + DIR_seg + "{prefix}.sorted_meth_segments_gr.RDS",
        outBed      = WORKDIR + DIR_seg + "{prefix}.sorted_meth_segments.bed"
    log:
        DIR_seg + "{prefix}.sorted_meth_segments.log"
    message:
        "Segmentation of sample file:\n"
        "   input     : {input.rdsfile}" + "\n" 
        "Generating:"+ "\n"
        "   report    : {output.report}" + "\n"
        "   grfile    : {output.grfile} " +"\n"
        "   bedfile   : {output.bedfile}" +"\n"

    script:
        DIR_scripts + "report_functions.R"


## Aquisition of gene features
rule fetch_refGene:
    output: refgenes = DIR_annot + "refseq.genes.{assembly}.bed"
    params:
        assembly = "{assembly}"
    log:
        DIR_annot + "fetch_refseq.genes.{assembly}.log"
    message:
        "Fetching RefSeq genes for Genome assembly: {wildcards.assembly}"
    shell:
        "{RSCRIPT} {DIR_scripts}/fetch_refGene.R {log} {output.refgenes} {params.assembly}"


## Annotation with gene features
rule methseg_annotation:
    input:
        template    = DIR_templates + "annotation.report.Rmd",
        bedfile     = DIR_seg + "{prefix}.sorted_meth_segments.bed",
        refgenes    = DIR_annot + "refseq.genes.{assembly}.bed"
    output:
        ## touch this imaginary file, to get the directory
        knitr_meta  = touch(DIR_final + "{prefix}/knitr_meta_{assembly}_notuse.rds"),
        report      = DIR_annot + "{prefix}.sorted_{assembly}_annotation.nb.html",
        # knitr_meta  = DIR_final + "{prefix}/knitr_meta_{assembly}.rds"
        #knitr_meta  = lambda wildcards: pass_knitr_meta(DIR_final,wildcards.prefix)
    params:
        inBed       = WORKDIR + DIR_seg + "{prefix}.sorted_meth_segments.bed",
        assembly    = "{assembly}",# expand(config["reference"]),
        refseqfile  = WORKDIR + DIR_annot + "refseq.genes.{assembly}.bed"
    log:
        DIR_annot + "{prefix}.sorted_{assembly}_annotation.log"
    message:
        "Annotation of Segments:\n"
        "   input     : {input.bedfile}" + "\n"
        "Generating:" + "\n"
        "   report    : {output.report}"
    script:
        DIR_scripts + "report_functions.R"


#----------------------------------- START DIFF METH

SAMPLE_IDS = list(config["SAMPLES"].keys())
SAMPLE_TREATMENTS = [config["SAMPLES"][s]["Treatment"] for s in SAMPLE_IDS]


def get_sampleids_from_treatment(treatment):
  treatments = treatment.split("_")
  sampleids_list = []
  for t in treatments:
    sampleids = [SAMPLE_IDS[i] for i, x in enumerate(SAMPLE_TREATMENTS) if x == t]
    sampleids_list.append(sampleids)
  
  sampleids_list = list(sum(sampleids_list, [])) 
  return(sampleids_list)


# For only CpG context
def diffmeth_input_function(wc):

  treatments = wc.treatment
  sampleids = get_sampleids_from_treatment(treatments)
  
  inputfiles = []
  for sampleid in sampleids:
    fqname = config["SAMPLES"][sampleid]['fastq_name']
    if len(fqname)==1:
      inputfile=[DIR_methcall + sampleid+"_se_bt2.deduped.sorted_CpG.txt"]
    elif len(fqname)==2:
      inputfile=[DIR_methcall + sampleid+"_1_val_1_bt2.deduped.sorted_CpG.txt"]
    inputfiles.append(inputfile)
  
  inputfiles = list(sum(inputfiles, []))
  return(inputfiles)


## Differential methylation
rule diffmeth:
    ## paths inside input and output should be relative
    input:  
        template    = DIR_templates + "diffmeth.report.Rmd",
        inputfiles  = diffmeth_input_function
    output: 
        report      = DIR_diffmeth + "{treatment}.sorted_diffmeth.nb.html",
        methylDiff_file  = DIR_diffmeth + "{treatment}.sorted_diffmeth.RDS",
        bedfile     = DIR_diffmeth + "{treatment}.sorted_diffmeth.bed",
        knitr_meta  = touch(DIR_final + "{treatment}/knitr_meta_notuse.rds")
    params:
        workdir     = WORKDIR,
        inputfiles  = diffmeth_input_function,
        sampleids   = lambda wc: [get_sampleids_from_treatment(t) for t in wc.treatment.split("_")],
        methylDiff_file      = WORKDIR + DIR_diffmeth + "{treatment}.sorted_diffmeth.RDS",
        methylDiff_hyper_file  = WORKDIR + DIR_diffmeth + "{treatment}.sorted_diffmethhyper.RDS",
        methylDiff_hypo_file   = WORKDIR + DIR_diffmeth + "{treatment}.sorted_diffmethhypo.RDS",
        outBed      = WORKDIR + DIR_diffmeth + "{treatment}.sorted_diffmeth.bed",
        assembly    = config['general']['genome-version'],
        treatment   = lambda wc: [[config["SAMPLES"][sampleid]['Treatment'] for sampleid in get_sampleids_from_treatment(t)] for t in wc.treatment.split("_")],
        mincov      = int(config['general']['methylation-calling']['minimum-coverage']),
        context     = "CpG",
        cores       = int(config['general']['differential-methylation']['cores'])
        
    log:
        DIR_diffmeth+"{treatment}.sorted_diffmeth.log"
    script:
        DIR_scripts + "report_functions.R" 


## Annotation with gene features
rule annotation_diffmeth:
    input:  
        template    = DIR_templates + "annotation.report.diff.meth.Rmd",
        bedfile     = DIR_diffmeth + "{treatment}.sorted_diffmeth.bed",
        refgenes    = DIR_annot + "refseq.genes.{assembly}.bed"
    output: 
        report      = DIR_annot + "{treatment}.sorted_{assembly}_annotation.diff.meth.nb.html",
        knitr_meta  = touch(DIR_final + "{treatment}.{assembly}/knitr_meta_notuse.rds")
    params:
        inBed       = WORKDIR + DIR_diffmeth + "{treatment}.sorted_diffmeth.bed",
        assembly    = config['general']['genome-version'],
        refseqfile  = WORKDIR + DIR_annot + "refseq.genes.{assembly}.bed",
        methylDiff_file  = WORKDIR + DIR_diffmeth + "{treatment}.sorted_diffmeth.RDS",
        methylDiff_hyper_file = WORKDIR + DIR_diffmeth + "{treatment}.sorted_diffmethhyper.RDS",
        methylDiff_hypo_file  = WORKDIR + DIR_diffmeth + "{treatment}.sorted_diffmethhypo.RDS",
        ideoDMC_script = DIR_scripts + "ideoDMC.R"
    log:
        DIR_annot + "{treatment}.sorted_{assembly}_annotation.diff.meth.log"
    script:
        DIR_scripts + "report_functions.R"   
        
#----------------------------------- END DIFF METH
   

### note that Final report can only be generated 
### if one of the intermediate has been genereted,
### so make sure that at least one has been run already
### right now ensured with 'rules.methseg_annotation.output' as input
### 

# rule multiqc:
#     input:
#         workdir = WORKDIR + "."


def get_fastq_name(full_name):
    # single end
    find_se_inx=full_name.find('_se_bt2')
    # paired-end
    find_pe_inx=full_name.find('_1_val_1_bt2')
    
    if(find_se_inx>=0):
      output=full_name[:find_se_inx]
    elif(find_pe_inx>=0):
     output=full_name[:find_pe_inx]
    else:
     print("Sth went wrong")
    
    return(output)


SAMPLE_TREATMENTS_DICT = dict(zip(SAMPLE_IDS, SAMPLE_TREATMENTS))
DIFF_METH_TREATMENT_PAIRS = config['DIFF_METH']

def diff_meth_input(wc):
  sample = wc.prefix
  sampleid = get_fastq_name(sample)
  treatment_of_sampleid = SAMPLE_TREATMENTS_DICT[ sampleid ]
  
  mylist = []
  for x in DIFF_METH_TREATMENT_PAIRS:
    if treatment_of_sampleid in x:
      name_of_dir = x[0]+"_"+x[1]+".sorted_"+wc.assembly+"_annotation.diff.meth.nb.html"
      mylist.append(DIR_annot + name_of_dir)
  return(mylist)


rule integrateFinalReport:
    input:
       diffmeth = diff_meth_input
    output:
       touch(DIR_final + "{prefix}_{assembly}_integrateDiffMeth2FinalReport.txt")
    log:
       DIR_final + "{prefix}_{assembly}_integrateFinalReport.log"
    params:
       diffmeth = lambda wildcards: ' '.join(map('{}'.format, diff_meth_input(wildcards)))
    shell:
      "{RSCRIPT} {DIR_scripts}/integrate2finalreport.R {wildcards.prefix} {wildcards.assembly} {DIR_final} {params.diffmeth}"


## Final Report
rule final_report:
    input:  
        rules.methseg_annotation.output,
        rules.integrateFinalReport.output,
        index       = DIR_templates + "index.Rmd",   
        references  = DIR_templates + "references.Rmd",
        sessioninfo = DIR_templates + "sessioninfo.Rmd"
        #fastq_name  = lambda wildcards: touch(get_fastq_name(wildcards.prefix))#,
        ## add rawqc at some point
    output: 
        finalreport = os.path.join(DIR_final, "{prefix}.sorted_{assembly}_final.nb.html"),
    params:
        finalreportdir = os.path.join(DIR_final, "{prefix}/")
      #  workdir = WORKDIR#,
        # fastq_name = lambda wildcards: get_fastq_name(wildcards.prefix)#,
        # rules.fastqc_raw.output
    log:
        DIR_final + "{prefix}.sorted_{assembly}_final.log"
    message:
        "Compiling Final Report:\n"
        "   report    : {output.finalreport}"#\n{params.fastq_name}"
        
    script:
        DIR_scripts + "multireport_functions.R"  

