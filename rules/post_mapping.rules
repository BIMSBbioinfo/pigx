####################################################################
#
# Rules to be applied after mapping reads with Bismark
# ====================================================

# These rules generate a report, such that the user can 
# see wich commands generated the output and 
# can recreate data with modified parameters if not happy with the results.
# 
# 

#
#
# Dependencies:
# - python-rp2, pandoc, methylKit(r), DT(r), genomation(r),
#   annotationhub(r), rtracklayer(r)
# 
####################################################################


"""
This is how the minimal config file should look like, in order to inlcude this snakefile


{
    "reference": {
        "ce10": ["/home/agosdsc/Base/Genomes/ce10/"]
    },
    "samples": {
        "A":["A"],
        "B":["B"]
    },
    "units": {
        "A":
            ["path/to/A_R1.fastq.gz", "path/to/A_R2.fastq.gz"],
        "B":
            ["path/to/B.fastq.gz"]
    },
    "treatment": {
        "A": 1,
        "B": 0
    },
    "params_bam_methCall": {
        "mincov": 10,
        "minqual": 20
    }     
}
"""

import os

#---------------------------------     DEFINE PATHS AND FILE NAMES:  ----------------------------------

#--- we need to define some directory variables to use rmarkdown from snakemake
#---                !!!! IMPORTANT !!!!
#--- ! paths inside input and output should be relative
#--- ! if params are passed to Rmarkdown document, paths to files or folders should be absolute   


WORKDIR = os.getcwd() + "/"                         #--- current work dir (important for rmarkdown)

SCRIPTDIR   = os.path.join(config['PATHOUT'], 'path_links/scripts/')
TEMPLATEDIR = os.path.join(config['PATHOUT'], 'path_links/report_templates/')

#--- pathout is ignored, since all paths are relative from either base or workdir
## notes:
## maybe set pathout by setting working dir in snakemake call
# PATHOUT      = config["PATHOUT"]
# LOGS        = config["LOG"] 



#--- the in/output directories can be renamed easily
#--- path to bam files is absolute, such that I can run workflow in any other directory
BAMDIR      = '06_sorted/'  # BASEDIR + "test_dataset/sample_bam_files/" 


#--- output paths have to be relative to working directory, 
#--- such that I can run workflow in any other directory and
#--- it always sets up the same structure
METHCALLDIR = "methylation_calls/"
SEGDIR      = "segmentation/"
ANNODIR     = "annotation/"
FINALDIR    = os.path.join(config['PATHOUT'], "final_Report/")
DIFFMETHDIR = 'differential_methylation/'



## Bam processing
rule bam_methCall:
    input:  
        template    = TEMPLATEDIR + "methCall.report.Rmd",
        bamfile     = BAMDIR  + "{prefix}.sorted.bam"
    output: 
        report      = METHCALLDIR + "{prefix}.sorted_meth_calls.nb.html",
        rdatafile   = METHCALLDIR + "{prefix}.sorted_methylRaw.RData",
        callFile    = METHCALLDIR + "{prefix}.sorted_CpG.txt",
        knitr_meta  = touch(FINALDIR + "{prefix}/knitr_meta_notuse.rds")
    params:
        ## absolute path to bamfiles
        inBam       = WORKDIR + BAMDIR + "{prefix}.sorted.bam",
        assembly    = config["GENOME_VERSION"],
        mincov      = int(config["bam_methCall_args_mincov"]),
        minqual     = int(config["bam_methCall_args_minqual"]),
        ## absolute path to output folder in working dir
        rdata       = WORKDIR + METHCALLDIR + "{prefix}.sorted_methylRaw.RData"
    log:
        METHCALLDIR + "{prefix}.sorted_meth_calls.log"
    message:
        "Processing of bam file:\n" 
        "   input     : {input.bamfile}" + "\n"
        "Generating:"+ "\n" 
        "   report    : {output.report}" + "\n" 
        "   rdata     : {output.rdatafile}" + "\n" 
        "   methCalls : {output.callFile}"
    script:
        SCRIPTDIR + "report_functions.R"  




## Segmentation
rule methseg:
    ## paths inside input and output should be relative
    input:  
        template    = TEMPLATEDIR + "methseg.report.Rmd",
        rdatafile   = METHCALLDIR + "{prefix}.sorted_methylRaw.RData"
    output: 
        report      = SEGDIR + "{prefix}.sorted_meth_segments.nb.html",
        grfile      = SEGDIR + "{prefix}.sorted_meth_segments_gr.RData",
        bedfile     = SEGDIR + "{prefix}.sorted_meth_segments.bed",
        knitr_meta  = touch(FINALDIR + "{prefix}/knitr_meta_notuse.rds")    
    params:
        rdata       = WORKDIR + METHCALLDIR + "{prefix}.sorted_methylRaw.RData",
        grdata      = WORKDIR + SEGDIR + "{prefix}.sorted_meth_segments_gr.RData",
        outBed      = WORKDIR + SEGDIR + "{prefix}.sorted_meth_segments.bed"
    log:
        SEGDIR + "{prefix}.sorted_meth_segments.log"
    message:
        "Segmentation of sample file:\n"
        "   input     : {input.rdatafile}" + "\n" 
        "Generating:"+ "\n"
        "   report    : {output.report}" + "\n"  
        "   grfile    : {output.grfile} " +"\n" 
        "   bedfile   : {output.bedfile}" +"\n"

    script:
        SCRIPTDIR + "report_functions.R" 


## Aquisition of gene features
rule fetch_refGene:
    output: refgenes = ANNODIR + "refseq.genes.{assembly}.bed"
    params: 
        assembly = "{assembly}"
    log:
        ANNODIR + "fetch_refseq.genes.{assembly}.log"
    message:
        "Fetching RefSeq genes for Genome assembly: {wildcards.assembly}"
    script:  
        SCRIPTDIR + "fetch_refGene.R" 


## Annotation with gene features
rule methseg_annotation:
    input:  
        template    = TEMPLATEDIR + "annotation.report.Rmd",
        bedfile     = SEGDIR + "{prefix}.sorted_meth_segments.bed",
        refgenes    = ANNODIR + "refseq.genes.{assembly}.bed"
    output: 
        ## touch this imaginary file, to get the directory
        knitr_meta  = touch(FINALDIR + "{prefix}/knitr_meta_{assembly}_notuse.rds"),
        report      = ANNODIR + "{prefix}.sorted_{assembly}_annotation.nb.html",
        # knitr_meta  = FINALDIR + "{prefix}/knitr_meta_{assembly}.rds"
        #knitr_meta  = lambda wildcards: pass_knitr_meta(FINALDIR,wildcards.prefix)
    params:
        inBed       = WORKDIR + SEGDIR + "{prefix}.sorted_meth_segments.bed",
        assembly    = "{assembly}",# expand(config["reference"]),
        refseqfile  = WORKDIR + ANNODIR + "refseq.genes.{assembly}.bed"
    log:
        ANNODIR + "{prefix}.sorted_{assembly}_annotation.log"
    message:
        "Annotation of Segments:\n"
        "   input     : {input.bedfile}" + "\n"
        "Generating:" + "\n"
        "   report    : {output.report}"
    script:
        SCRIPTDIR + "report_functions.R"   


#----------------------------------- START DIFF METH
DIFFMETHDIR = 'differential_methylation/'


SAMPLE_IDS = list(config["SAMPLES"].keys())
SAMPLE_TREATMENTS = [config["SAMPLES"][s]["Treatment"] for s in SAMPLE_IDS]


# For only CpG context
def diffmeth_input_function(wc):

  treatments = wc.treatment
  treatments = treatments.split("_")

  inputfiles = []
  for t in treatments:
    indx = SAMPLE_TREATMENTS.index(t)
    sampleid = SAMPLE_IDS[indx]
    
    fqname = config["SAMPLES"][sampleid]['fastq_name']
    if len(fqname)==1:
      inputfile=[METHCALLDIR + sampleid+"_se_bt2.deduped.sorted_CpG.txt"]
    elif len(fqname)==2:
      inputfile=[METHCALLDIR + sampleid+"_1_val_1_bt2.deduped.sorted_CpG.txt"]

    inputfiles.append(inputfile)
  
  inputfiles = list(sum(inputfiles, []))
  return(inputfiles)


## Differential methylation
rule diffmeth:
    ## paths inside input and output should be relative
    input:  
        template    = TEMPLATEDIR + "diffmeth.report.Rmd",
        inputfiles  = diffmeth_input_function
    output: 
        report      = DIFFMETHDIR + "{treatment}.sorted_diffmeth.nb.html",
        methylDiff_file  = DIFFMETHDIR + "{treatment}.sorted_diffmeth.RDS",
        bedfile     = DIFFMETHDIR + "{treatment}.sorted_diffmeth.bed",
        knitr_meta  = touch(FINALDIR + "{treatment}/knitr_meta_notuse.rds")
    params:
        workdir     = WORKDIR,
        inputfiles  = diffmeth_input_function,
        sampleids   = lambda wc: [SAMPLE_IDS[SAMPLE_TREATMENTS.index(t)] for t in wc.treatment.split("_")],
        methylDiff_file      = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmeth.RDS",
        methylDiff_hyper_file  = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmethhyper.RDS",
        methylDiff_hypo_file   = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmethhypo.RDS",
        outBed      = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmeth.bed",
        assembly    = config["GENOME_VERSION"],
        treatment   = lambda wc: wc.treatment.split("_"),
        mincov      = int(config["bam_methCall_args_mincov"]), 
        context     = "CpG",
        cores       = int(config["diffmeth_cores"])
        
    log:
        DIFFMETHDIR+"{treatment}.sorted_diffmeth.log"
    script:
        SCRIPTDIR + "report_functions.R" 


## Annotation with gene features
rule annotation_diffmeth:
    input:  
        template    = TEMPLATEDIR + "annotation.report.diff.meth.Rmd",
        bedfile     = DIFFMETHDIR + "{treatment}.sorted_diffmeth.bed",
        refgenes    = ANNODIR + "refseq.genes.{assembly}.bed"
    output: 
        report      = ANNODIR + "{treatment}.sorted_{assembly}_annotation.diff.meth.nb.html",
        knitr_meta  = touch(FINALDIR + "{treatment}.{assembly}/knitr_meta_notuse.rds")
    params:
        inBed       = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmeth.bed",
        assembly    = config["GENOME_VERSION"],
        refseqfile  = WORKDIR + ANNODIR + "refseq.genes.{assembly}.bed",
        methylDiff_file  = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmeth.RDS",
        methylDiff_hyper_file = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmethhyper.RDS",
        methylDiff_hypo_file  = WORKDIR + DIFFMETHDIR + "{treatment}.sorted_diffmethhypo.RDS",
        ideoDMC_script = SCRIPTDIR + "ideoDMC.R"
    log:
        ANNODIR + "{treatment}.sorted_{assembly}_annotation.diff.meth.log"
    script:
        SCRIPTDIR + "report_functions.R"   
        
#----------------------------------- END DIFF METH
   

### note that Final report can only be generated 
### if one of the intermediate has been genereted,
### so make sure that at least one has been run already
### right now ensured with 'rules.methseg_annotation.output' as input
### 

# rule multiqc:
#     input:
#         workdir = WORKDIR + "."


def get_fastq_name(full_name):
    # single end
    find_se_inx=full_name.find('_se_bt2')
    # paired-end
    find_pe_inx=full_name.find('_1_val_1_bt2')
    
    if(find_se_inx>=0):
      output=full_name[:find_se_inx]
    elif(find_pe_inx>=0):
     output=full_name[:find_pe_inx]
    else:
     print("Sth went wrong")
    
    return(output)


SAMPLE_IDS = list(config["SAMPLES"].keys())
SAMPLE_TREATMENTS = [config["SAMPLES"][s]["Treatment"] for s in SAMPLE_IDS]
SAMPLE_TREATMENTS_DICT = dict(zip(SAMPLE_IDS, SAMPLE_TREATMENTS))
DIFF_METH_TREATMENT_PAIRS = config['DIFF_METH']

def diff_meth_input(wc):
  sample = wc.prefix
  sampleid = get_fastq_name(sample)
  treatment_of_sampleid = SAMPLE_TREATMENTS_DICT[ sampleid ]
  
  mylist = []
  for x in DIFF_METH_TREATMENT_PAIRS:
    if treatment_of_sampleid in x:
      name_of_dir = x[0]+"_"+x[1]+".sorted_"+wc.assembly+"_annotation.diff.meth.nb.html"
      mylist.append(ANNODIR + name_of_dir)
  return(mylist)


rule integrateFinalReport:
    input:
      diffmeth = diff_meth_input
    output:
       touch(FINALDIR + "{prefix}_{assembly}_integrateDiffMeth2FinalReport.txt")
    params:
        finalreportdir = FINALDIR
    log:
       FINALDIR + "{prefix}_{assembly}_integrateFinalReport.log"
    script:
      SCRIPTDIR + "integrate2finalreport.R"


## Final Report
rule final_report:
    input:  
        rules.methseg_annotation.output,
        rules.integrateFinalReport.output,
        index       = TEMPLATEDIR + "index.Rmd",   
        references  = TEMPLATEDIR + "references.Rmd",
        sessioninfo = TEMPLATEDIR + "sessioninfo.Rmd"
        #fastq_name  = lambda wildcards: touch(get_fastq_name(wildcards.prefix))#,
        ## add rawqc at some point
    output: 
        finalreport = os.path.join(FINALDIR, "{prefix}.sorted_{assembly}_final.nb.html"),
    params:
        finalreportdir = os.path.join(FINALDIR, "{prefix}/")
      #  workdir = WORKDIR#,
        # fastq_name = lambda wildcards: get_fastq_name(wildcards.prefix)#,
        # rules.fastqc_raw.output
    log:
        FINALDIR + "{prefix}.sorted_{assembly}_final.log"
    message:
        "Compiling Final Report:\n"
        "   report    : {output.finalreport}"#\n{params.fastq_name}"
        
    script:
        SCRIPTDIR + "multireport_functions.R"  




