---
title: "PiGx-ChIPseq - Quality control of ChIP-seq data Report"
author: "BIMSB Bioinformatics Platform"
date: '`r format(as.POSIXct(if ("" != Sys.getenv("SOURCE_DATE_EPOCH")) { as.numeric(Sys.getenv("SOURCE_DATE_EPOCH")) } else { Sys.time() }, origin="1970-01-01"), "%Y-%m-%d %H:%M:%S")`'
header-includes:
  - \usepackage{comment}
output:
  html_document:
    highlight: kate
    theme: spacelab
    toc: yes
    toc_float: yes

knit: (function(inputFile, encoding) { rmarkdown::render(inputFile, encoding = encoding, output_file = paste0(substr(inputFile,1,nchar(inputFile)-4),paste0('_',format(as.POSIXct(if ("" != Sys.getenv("SOURCE_DATE_EPOCH")) { as.numeric(Sys.getenv("SOURCE_DATE_EPOCH")) } else { Sys.time() }, origin="1970-01-01"), "%y%m%d")),'.html')) })


params:
    analysis_path:  NULL
    analysis_names: NULL
    analysis_mode:  NULL
    report_chunks:  NULL
    script_path:    NULL
    infile:         NULL
    width_params:   NULL
    logo:           NULL
    random_seed:    123

---

<style>
#logo
{
    position: relative;
}
#logo img {
    /*position: relative;*/
    top: 25px;
    /*right: 0px;*/
    left: 50px;
    position: fixed;
    width: 125px;
    }
body
{
    position: absolute;
    top: 150px;
}
</style>

<div id="logo" align="top">
```{r echo=FALSE}
knitr::include_graphics(params$logo)
```
</div>

This report was generated with PiGx ChIPseq version @VERSION@.

```{r setup, include=FALSE, cache=FALSE, fig.height=10, fig.width=10}
# file = '/home/vfranke/Projects/pigx_chipseq/scripts/Sample_Report.rmd'
# setwd(dirname(file))
# file = basename(file)
# outfile = paste(stringr::str_replace(file, '.rmd',''), format(Sys.time(), "%y%m%d"),'html', sep='.')
# rmarkdown::render(file, output_format='html_document', output_file = outfile)
knitr::opts_chunk$set(echo       = FALSE,
                      cache      = FALSE,
                      messages   = FALSE,
                      warning    = FALSE,
                      autodep    = TRUE,
                      error      = FALSE,
                      eval       = TRUE)


set.seed(params$random_seed)
```

```{r test_input, include=FALSE}
# checks whether the allowed analysis chunks are passed to the script
.allowed_analysis_names = params$report_chunks
set_analysis = setdiff(params$analysis_names, .allowed_analysis_names)
if(length(set_analysis))
  stop('The current analysis are not supported:', set_analysis)

# set the mode of analysis to adjust sections and text
analysis_mode = params$analysis_mode

ncat = function(text)cat(paste0('\n',text),'\n')
```


```{r Reporttoplevel_HEADER, eval=FALSE, include=FALSE}

basic_paramsDesc <- c("Sample ID",
            "Source directory",
            "Output directory ([out]) ",
            "Reference genome assembly"
            )

basic_paramsValues <- c( params$Samplename,
             params$source_dir,
             params$out_dir, 
             params$assembly
             )

basic_inputParams <- data.frame(Parameters = basic_paramsDesc,
                          Values = basic_paramsValues,
                          stringsAsFactors = FALSE)
#params
#datatable(basic_inputParams,options = list(dom = 't'),rownames = FALSE)
knitr::kable(basic_inputParams)

```

```{r libraries, include=FALSE}
suppressPackageStartupMessages({
    library(GenomicRanges)
    library(data.table)
    library(stringr)
    library(genomation)
    library(dplyr)
    library(tidyr)
    library(ggplot2)
    library(heatmaply)
    library(plotly)
})
```

```{r source, include=FALSE}
source(file.path(params$script_path, 'Functions_Sample_Report.R'))
```

```{r input, include=FALSE, message=TRUE}
rds_files = get_RDS_Input_files(params$analysis_path)
rds_files = subset(rds_files, name %in% subset(rds_files, type=='ChIPQC')$name)


# some sections of the pipeline are conditional. Because of that, the
# document looks at which sections were executed and parses only this input
# analysis_ind contains an index which says which chunks should be included
# in the markdown
analysis_ind = params$report_chunks %in% params$analysis_names
names(analysis_ind) = params$report_chunks

if(length(set_analysis) == 0)
  set_analysis = params$analysis_names

# al = params
# saveRDS(al, 'Sample_Report_Params.rds')
# params = readRDS('Sample_Report_Params.rds')

lstats = readRDS(params$infile)
```

```{r variables, include=FALSE, message=FALSE}
number_of_samples = ncol(lstats$ChIPQC$norm.count)

# ---------------------------------------------------------------------------- #
# Figure sizes

getScaleFactor <- function(number_of_samples,stdHeight=10,
                           incHeight=15,minScale=0.15) {
    scale_factor = ifelse(number_of_samples<stdHeight,number_of_samples/stdHeight,
                      ifelse(number_of_samples<=50,
                             stdHeight/number_of_samples,
                             ifelse(number_of_samples <= 100,
                                    incHeight/number_of_samples,
                                    minScale)))
    return(scale_factor)
}

scale_factor <- getScaleFactor(number_of_samples)
sample_correlation_width  = number_of_samples*scale_factor + 2
sample_correlation_height = number_of_samples*scale_factor

# sets the default for the Peak_Statistics_Header3
number_of_peaks     = 10
peak_number_width   = 100

```

# Sample Correlation

```{r Sample_Correlation_text, results='asis'}
message = sprintf('The following figure shows clustering of normalized %s signal, quantified in 1 kb bins.
The color scale represents spearman correlation coefficient. The samples should cluster based on their biological function, and not based on batch effects or latent variables.', analysis_mode)
ncat(message)
```


```{r Sample_Correlation, include=TRUE, fig.align='center', message=FALSE, warning=FALSE, fig.width=sample_correlation_width, fig.height=sample_correlation_height, warning=FALSE, message=FALSE}
dcor = cor(lstats$ChIPQC$norm.count, method='spearman')
margin_size = max(nchar(rownames(dcor))) * 10
heatmaply(dcor,
          k_col = 2, k_row = 2,
          limits = c(-1,1),
          margins = c(margin_size,margin_size,40,40))

```

---

# Inter Strand Cross Correlation

```{r Inter_Strand_Cross_Correlation_text, results='asis'}
message = sprintf('Inter strand cross-correlation show the correlation of %s signal between Watson and Crick strands. The coverage vectors are firstly shifted by the designated amount and correlation coefficient is calculated from the resulting vectors.', analysis_mode)

if( toupper(analysis_mode) == 'CHIP') {
    message = paste(message,'If the DNA shearing, chromatin immunoprecipitation, and fragment selection were succesfull, the maximum value of the, per sample, distribution should correspond to the average fragment length.')
} else {
    message = paste(message,' If the DNA transposition and fragment selection were succesfull, the distribution should show a periodic pattern, corresponding to nucleosome positioning on the DNA.')
}
    
ncat(message)
```


```{r Cross_Correlation, include=TRUE, fig.align='center', fig.height=sample_correlation_height, fig.width = 10, warning=FALSE, message=FALSE}
cc = lstats$ChIPQC$shift_correlation %>%
    mutate(shift = shift*10) %>%
    tidyr::spread(shift, strand_correlation, fill=0) %>%
    as.data.frame()
rownames(cc) = cc$sample_name
cc$sample_name = NULL
margin_left = max(nchar(rownames(cc)))*10
```

```{r Cross_Correlation_Plot, include=TRUE, fig.align='center', fig.height=sample_correlation_height, fig.width = 10, warning=FALSE, message=FALSE}
heatmaply(cc,
          xlab   = 'Read Shift',
          ylab   = 'Sample',
          k_col  = 2, k_row = 2,
          limits = c(0,1),
          colors = c('royalblue4','white','darkred'),
          Colv   = FALSE,
          column_text_angle = 90,
          margins = c(150, margin_left, 0, 0),
          colorbar_xanchor = 'middle',
          colorbar_yanchor = 'bottom')

```

---

# Read duplication rate

The following figure shows the proportion of fragments which were duplicated in each sample (e.g. fragments which have the same chr, start, end, strand).

```{r Read_Duplication_Rate, include=TRUE, fig.align='center', fig.height=sample_correlation_height, fig.width = 10, warning=FALSE, message=FALSE, eval=TRUE}
lstats$ChIPQC$duplication_rate %>%
    arrange(duplication_percentage) %>%
    mutate(sample_name = factor(sample_name, ordered=TRUE)) %>%
    ggplot(aes(reorder(sample_name, duplication_percentage), duplication_percentage)) +
    geom_bar(position='dodge',stat='identity') +
    xlab('Sample') +
    ylab('Percentage of uniquely mapped positions')+
    coord_flip() +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

---

# Reads Mapping to Mitochondrial Chromosome

Following plot shows the percentage of reads mapped to the mitchondrial chromosome. This information is useful in the context of ATAC-seq data, as these reads are usually ignored and lower the total mapping rate.

```{r Reads_Mapping_to_Mitochondrial_Chromosome, include=TRUE, fig.align='center', fig.height=sample_correlation_height, fig.width = 10, warning=FALSE, message=FALSE, eval=TRUE}
lstats$ChIPQC$mitochondrial_reads %>%
    arrange(perc_orig_chrM) %>%
    mutate(sample_name = factor(sample_name, ordered=TRUE)) %>%
    ggplot(aes(reorder(sample_name, perc_orig_chrM), perc_orig_chrM)) +
    geom_bar(position='dodge',stat='identity') +
    xlab('Sample') +
    ylab('Percentage of reads mapping to mitochondrial DNA')+
    ylim(c(0,1)) +
    coord_flip() + 
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

---

# Library Complexity

```{r Library_Complexity, include=TRUE, fig.align='center', fig.height=sample_correlation_height, fig.width = 10, warning=FALSE, message=FALSE, eval=TRUE}
lstats$ChIPQC$library_complexity %>%
    mutate(bin = cut(bin, seq(0,1, 0.1), include.lowest=TRUE)) %>%
    ggplot(aes(bin, count, fill=sample_name)) +
    geom_bar(position='dodge',stat='identity')  +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    xlab('Percentage of unique reads') +
    ylab('Number of mapped positions') -> 
    g

ggplotly(g)
```

---

# GC Content Vs Number of Reads

```{r GC_Content, include=TRUE, fig.align='center', fig.height=sample_correlation_height, fig.width = 10, warning=FALSE, message=FALSE}
gc_heat = lstats$ChIPQC$GC %>%
    mutate(GC = cut(GC, seq(0,max(GC), 0.05), include.lowest = TRUE)) %>%
    group_by(sample_name, GC) %>%
    summarize(counts = sum(counts)) %>%
    mutate(counts = round(log10(counts+1),2)) %>%
    tidyr::spread(GC, counts, fill = 0) %>%
    as.data.frame()
rownames(gc_heat) = gc_heat$sample_name
gc_heat$sample_name = NULL

gc = lstats$ChIPQC$GC %>%
    group_by(sample_name, GC) %>%
    summarize(counts = sum(counts)) %>%
    mutate(counts = round(log10(counts+1),2)) %>%
    tidyr::spread(GC, counts, fill = 0) %>%
    as.data.frame()
rownames(gc) = gc$sample_name
gc$sample_name = NULL
gc_fig_width = nrow(gc)*0.5
```

```{r GC_Content_Per_Sample, include=TRUE, fig.align='center', results='asis'}
gl = list()
for(sample in unique(lstats$ChIPQC$GC$sample_name)){
    g = lstats$ChIPQC$GC %>%
        dplyr::filter(sample_name %in% sample) %>%
        ggplot(aes(GC, counts)) +
            geom_hex(alpha = .5) +
            xlab('GC content') +
            ylab('Normalized read count') +
            scale_y_log10() +
            ggtitle(sample)
    gl[[sample]] = g
}
```

The figure shows the dependence of read counts on the GC content,
quantified over 1 kb bins. The plot is a diagnostic for proper fragment selection and PCR amplification.

```{r GC_Content_Plot, include=TRUE, fig.align='center', fig.height=sample_correlation_height, fig.width = 10, warning=FALSE, message=FALSE}
heatmaply(gc_heat,
          xlab   = 'GC content',
          ylab   = 'Sample',
          k_col  = 2, k_row = 2,
          colors = c('white','darkred'),
          margin = c(150, margin_left, 0, 0),
          Colv   = FALSE)
```


```{r GC_Content_Plot_Header, include=TRUE, fig.align='center', results='asis'}
ncat('## GC Content Distribution Per Sample {.tabset .tabset-dropdown}')
```

The following sets of plots show, for each sample the dependence of read counts on the GC content.

```{r GC_Content_Per_Sample_Plots, include=TRUE, fig.align='center', results='asis', eval=TRUE}
for(sample in names(gl)){
    ncat(paste('###',sample, '{-}'))
    print(gl[[sample]])
    ncat('\n')
}
```

---

# Read Distribution in Genomic Features

Following plots show the distribution of reads over functional genomic features.
The distribution should correspond to the known biological priors
(i.e. H3k4me3 should show an increase of reads in the TSS region)

```{r Read_Distribution_in_Genomic_Features, include=TRUE, fig.align='center'}
g = lstats$ChIPQC$Annotation %>%
    mutate(annot = case_when(
      annot == 'None' ~ 'intergenic',
      TRUE ~ as.character(annot)
    )) %>%
    ggplot(aes(x = sample_name, y=freq, fill=annot)) +
        geom_bar(stat='identity') +
        xlab('Sample') +
        ylab('Frequency of reads in genomic annotation') +
        scale_fill_brewer(name = 'Annotation', palette='Set2') +
        coord_flip() +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))

read_distribution_width = length(unique(lstats$ChIPQC$Annotation$sample_name))*0.5
```

```{r Read_Distribution_in_Genomic_Features_Plot, include=TRUE, fig.align='center', fig.height=sample_correlation_height, fig.width = 10}
print(g)
```

---

```{r Read_Distribution_in_Genomic_Features_Header2, include=analysis_ind['Extract_Signal_Annotation'], fig.align='center', eval=analysis_ind['Extract_Signal_Annotation'], results='asis'}
ncat('## Signal profiles around genomic features {.tabset}')

message = sprintf('The following sets of plots show the positional distribution of %s signal around sets of genomic features. The figures are not intended for hypothesis formation, and interpretation, rather, they should be used only for quality control. The profiles should look similar to the profiles from published experiments. For proper biological interpretation, the data should be analyzed in more detail, with corresponding statistical methods.',analysis_mode)
ncat(message)
```

```{r Signal_profiles_in_genomic_features, include=TRUE, fig.align='center', eval=analysis_ind['Extract_Signal_Annotation'], results='asis'}
tab = lstats$Extract_Signal_Annotation$profiles
genomic_locations = unique(tab$genomic_location)

genomic_coordinates = lapply(setNames(genomic_locations,genomic_locations), function(x){

    v = list()
    if(x == 'splicing_acceptor')
        x = 'splicing_accep'
    if(x %in% c('tss', 'tts','tss_wide','tts_wide', 'splicing_donor', 'splicing_accep')){
        w   = round(width_params[[paste(x, 'width', sep='_')]]/2)
        pos = max(tab$position)
        v$labels = c(-w, 0, +w)
        v$breaks = c(0, floor(pos)/2, pos)
    }
    if(x %in% c('exon','intron','gene')){
        pos = max(tab$position)
        v$labels = c(0,100)
        v$breaks = c(0, pos)
    }
    if(x %in% c('tss_body', 'tts_body')){
        up   = width_params[[paste(x, 'upstream',   sep='_')]]
        down = width_params[[paste(x, 'downstream', sep='_')]]
        pos = max(tab$position)
        v$labels = c(-up,down)
        v$breaks = c(0, pos)

    }
    v
})

make_plotly <- number_of_samples > 20
```



```{r Signal_profiles_in_genomic_features_ggplot, include=TRUE, fig.align='center', eval=analysis_ind['Extract_Signal_Annotation']&!make_plotly, fig.width = 10, results='asis'}
for(i in seq(genomic_locations)){
  location = genomic_locations[i]
  coordinates = genomic_coordinates[[location]]
  ncat(paste('###',location, '{-}'))
  g = tab %>%
    dplyr::filter(genomic_location==location)  %>%
    ggplot(aes(position, value, color=sample_name)) +
    geom_line() +
    xlab('Relative position') +
    ylab('Signal Value') +
    scale_x_continuous(breaks = coordinates$breaks,
                       labels = as.character(coordinates$labels)) +
      theme_bw()

    if(length(coordinates$breaks) == 3)
        g = g + geom_vline(xintercept = coordinates$breaks[2], linetype=2)

  print(g)
  cat('\n')
}
```


```{r Signal_profiles_in_genomic_features_plotly, include=TRUE, fig.align='center', eval=analysis_ind['Extract_Signal_Annotation']&make_plotly, fig.width = 10}

tab_wide <- spread(tab, genomic_location, value)

p <- plot_ly(data = tab_wide, x = ~position, color = ~sample_name, colors = "Set1") %>%
    ## add default plot
    add_lines( y = tab_wide[[genomic_locations[1]]], x = tab_wide[['position']]) %>%
    layout(yaxis = list(title = 'Signal Value'),
           xaxis = list(title = 'Relative position',
                        tickvals = genomic_coordinates[[1]]$breaks,
                        ticktext = genomic_coordinates[[1]]$labels))

for(i in seq(2,length(genomic_locations))){
    location = genomic_locations[i]
    coordinates = genomic_coordinates[[location]]
    ## other plots
    p <- add_lines(p, 
                   y = tab_wide[[location]], 
                   x = tab_wide[['position']], 
                   visible = F)
}

location_mask <- rep(genomic_locations, each = nrow(tab_wide)/length(unique(tab_wide$position)))

## we want to update the plot to restyle and relayout in one go (see https://plot.ly/r/custom-buttons/#update-button)
updateList <- list()
for(i in seq(genomic_locations)){
    ## determine which lines to show
    visibility_mask <- location_mask == genomic_locations[[i]]
    ## create updatemenue components
    updateList[[i]] <- list(
        method = "update",
        ## for method 'update' args is a list with two internal lists 
        ## (for restyle and relayout each)
        args = list( 
            ## restyle list
            list(visible = visibility_mask),
            ## relayout list
            list(xaxis = list(tickvals = genomic_coordinates[[i]]$breaks, 
                              ticktext = genomic_coordinates[[i]]$labels,
                              title = 'Relative position'))
                    ),
        label = genomic_locations[[i]])
}

p <- p %>% layout(
    xaxis = list(title = 'Relative position'),
    yaxis = list(title = 'Signal Value'),
    updatemenus = list(
        list(y = 0.7,
             title = "Genomic Feature",
             buttons = updateList)
        )
    )
p


```


---

```{r Peak_Statistics_Header, include=analysis_ind['Peak_Statistics'], eval=analysis_ind['Peak_Statistics'], fig.align='center', results='asis'}
ncat('# Peak Statistics')

message  = 'Frequency of reads in peaks is a read out of ChIP efficiency. For mamallian genomes an enrichment > 5% is considered as mediocre, an enrichment >10% is considered good, and >20% excellent. The samples should also be checked by looking at the signal profiles in the genome browser.'

ncat(message)

ncat('## Frequency of reads in peaks')
```

```{r Peak_Statistics_Freq_Reads_In_Peaks, include=FALSE, eval=analysis_ind['Peak_Statistics'], fig.align='center'}
dd = lstats$Peak_Statistics$peaks_sample %>%
  dplyr::select(-bed_file, -bw_files, -bam_file)                 %>%
  tidyr::gather(sample_cnt, value, -sample_name, -bam_name, -sample_id, -peak_number, -library, -mapped_total)                         %>%
  mutate(value = as.numeric(value)) %>%
  mutate(mapped_total = as.numeric(mapped_total)) %>%
  mutate(value      = round(value/mapped_total,2))

g = dd %>%
  dplyr::filter(bam_name == sample_cnt)                          %>%
  ggplot(aes(x = sample_name, y = value, fill=bam_name)) +
  geom_bar(stat='identity', position='dodge') +
  xlab('Peak name')                           +
  ylab('Percentage of reads in peaks') +
  coord_flip() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  scale_fill_discrete('Sample')

number_of_peaks = length(unique(dd$sample_name))*0.5+2
```

```{r Peak_Statistics_Freq_Reads_In_Peaks_ggplot, include=analysis_ind['Peak_Statistics'], eval=analysis_ind['Peak_Statistics']&!make_plotly, fig.align='center', results='asis', fig.height=number_of_peaks, fig.width = 10}
print(g)
```

```{r Peak_Statistics_Freq_Reads_In_Peaks_plotly, include=analysis_ind['Annotate_Peaks'], eval=analysis_ind['Annotate_Peaks']&make_plotly, fig.align='center', fig.height=number_of_peaks, fig.width=10}
ggplotly(g)
```

---

```{r Peak_Number_Header, include=analysis_ind['Annotate_Peaks'], eval=analysis_ind['Annotate_Peaks'], fig.align='center', results='asis'}
ncat('# Peak Distribution in Genomic Features')

message  = 'The following sets of plots show the peak distribution in functional genomic features. The peaks are annotated in a hierarchical procedure based on the following order: TSS > TTS > Exon > Intron > Intergenic.'

ncat(message)

ncat('## Number of peaks per sample in genomic features')
```


```{r Peak_Number_in_Genomic_Features, include=FALSE, eval=analysis_ind['Annotate_Peaks'], fig.align='center'}
g = lstats$Annotate_Peaks    %>%
    
    mutate(annot = case_when(
      annot == 'none' ~ 'intergenic',
      TRUE ~ as.character(annot)
    )) %>%
    group_by(sample_name) %>%
    mutate(n = sum(counts)) %>%
    arrange(desc(-n)) %>%
    ungroup() %>%
    mutate(sample_name = factor(sample_name, ordered=TRUE, levels=unique(sample_name))) %>%
    ggplot(aes(sample_name, counts, fill=annot)) +
    geom_bar(stat='identity') +
    xlab('Sample name') +
    ylab('Number of peaks') +
    coord_flip() + 
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    scale_fill_brewer(name='Annotation', palette='Set2')

number_of_peaks <- length(unique(lstats$Annotate_Peaks$sample_name))
peak_number_width = number_of_peaks*getScaleFactor(number_of_peaks)+4
```

```{r Peak_Number_in_Genomic_Features_Plot, include=analysis_ind['Annotate_Peaks'], eval=analysis_ind['Annotate_Peaks'], fig.align='center', fig.height=peak_number_width, fig.width=10}
print(g)
```


---

# Session Information
```{r sessionInfo}
sessionInfo()
```
