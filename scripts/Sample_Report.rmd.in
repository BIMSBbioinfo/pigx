---
title: "Quality control of ChIP-seq data"
author: "PiGx ChIP-seq"
header-includes:
  - \usepackage{comment}
output:
  html_document:
    highlight: kate
    theme: spacelab
    toc: yes
    toc_float: yes

knit: (function(inputFile, encoding) { rmarkdown::render(inputFile, encoding = encoding, output_file = paste0(substr(inputFile,1,nchar(inputFile)-4),paste0('_',format(as.POSIXct(if ("" != Sys.getenv("SOURCE_DATE_EPOCH")) { as.numeric(Sys.getenv("SOURCE_DATE_EPOCH")) } else { Sys.time() }, origin="1970-01-01"), "%y%m%d")),'.html')) })


params:
    analysis_path:  NULL
    analysis_names: NULL
    report_chunks:  NULL
    script_path:    NULL
    infile:         NULL
    width_params:   NULL


---

This report was generated with PiGx ChIPseq version @VERSION@.

```{r setup, include=FALSE, cache=FALSE, fig.height=10, fig.width=10}
# file = '/home/vfranke/Projects/pigx_chipseq/scripts/Sample_Report.rmd'
# setwd(dirname(file))
# file = basename(file)
# outfile = paste(stringr::str_replace(file, '.rmd',''), format(Sys.time(), "%y%m%d"),'html', sep='.')
# rmarkdown::render(file, output_format='html_document', output_file = outfile)
knitr::opts_chunk$set(echo       = FALSE,
                      cache      = FALSE,
                      messages   = FALSE,
                      warning    = FALSE,
                      autodep    = TRUE,
                      error      = FALSE,
                      eval       = TRUE)


```

```{r test_input, include=FALSE}
# checks whether the allowed analysis chunks are passed to the script
.allowed_analysis_names = params$report_chunks
set_analysis = setdiff(params$analysis_names, .allowed_analysis_names)
if(length(set_analysis))
  stop('The current analysis are not supported:', set_analysis)

ncat = function(text)cat(paste0('\n',text),'\n')
```


```{r libraries, include=FALSE}
suppressPackageStartupMessages(library(GenomicRanges))
suppressPackageStartupMessages(library(data.table))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(genomation))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(heatmaply))
suppressPackageStartupMessages(library(plotly))
```

```{r source, include=FALSE}
source(file.path(params$script_path, 'Functions_Sample_Report.R'))
```

```{r input, include=FALSE, message=TRUE}
rds_files = get_RDS_Input_files(params$analysis_path)
rds_files = subset(rds_files, name %in% rds_files$name[1:5])


# some sections of the pipeline are conditional. Because of that, the
# document looks at which sections were executed and parses only this input
# analysis_ind contains an index which says which chunks should be included
# in the markdown
analysis_ind = params$report_chunks %in% params$analysis_names
names(analysis_ind) = params$report_chunks

if(length(set_analysis) == 0)
  set_analysis = params$analysis_names

# al = params
# saveRDS(al, 'Sample_Report_Params.rds')
# params = readRDS('Sample_Report_Params.rds')

lstats = readRDS(params$infile)
```

```{r variables, include=FALSE, message=FALSE}
number_of_samples = ncol(lstats$ChIPQC$norm.count)

# ---------------------------------------------------------------------------- #
# Figure sizes
scale_factor = .6
sample_correlation_width  = number_of_samples*scale_factor + 2
sample_correlation_height = number_of_samples*scale_factor

```

# Sample Correlation
```{r Sample_Correlation, include=TRUE, fig.align='center', message=FALSE, warning=FALSE, fig.width=sample_correlation_width, fig.height=sample_correlation_height, warning=FALSE, message=FALSE}
dcor = cor(lstats$ChIPQC$norm.count, method='spearman')
margin_size = max(nchar(rownames(dcor))) * 10
heatmaply(dcor,
          k_col = 2, k_row = 2,
          limits = c(-1,1),
          margins = c(margin_size,margin_size,40,40))

```

---

# Inter Strand Cross Correlation
```{r Cross_Correlation, include=TRUE, fig.align='center', fig.height=sample_correlation_height, fig.width = 10, warning=FALSE, message=FALSE,fig.width=10}
cc = lstats$ChIPQC$shift_correlation %>%
    mutate(shift = shift*10) %>%
    tidyr::spread(shift, strand_correlation, fill=0) %>%
    as.data.frame()
rownames(cc) = cc$sample_name
cc$sample_name = NULL
margin_left = max(nchar(rownames(cc)))*10
```

```{r Cross_Correlation_Plot, include=TRUE, fig.align='center', fig.height=sample_correlation_height, fig.width = 10, warning=FALSE, message=FALSE}
heatmaply(cc,
          xlab   = 'Read Shift',
          ylab   = 'Sample',
          k_col  = 2, k_row = 2,
          limits = c(-1,1),
          colors = c('royalblue4','white','darkred'),
          Colv   = FALSE, 
          column_text_angle = 90,
          margins = c(150, margin_left, 0, 0),
          colorbar_xanchor = 'middle',
          colorbar_yanchor = 'bottom')

```

---

# GC Content Vs Number of Reads

```{r GC_Content, include=TRUE, fig.align='center', fig.height=sample_correlation_height, fig.width = 10, warning=FALSE, message=FALSE}
gc_heat = lstats$ChIPQC$GC %>%
    mutate(GC = cut(GC, seq(0,max(GC), 0.05), include.lowest = TRUE)) %>%
    group_by(sample_name, GC) %>%
    summarize(counts = sum(counts)) %>%
    mutate(counts = round(log10(counts+1),2)) %>%
    tidyr::spread(GC, counts, fill = 0) %>%
    as.data.frame()
rownames(gc_heat) = gc_heat$sample_name
gc_heat$sample_name = NULL

gc = lstats$ChIPQC$GC %>%
    group_by(sample_name, GC) %>%
    summarize(counts = sum(counts)) %>%
    mutate(counts = round(log10(counts+1),2)) %>%
    tidyr::spread(GC, counts, fill = 0) %>%
    as.data.frame()
rownames(gc) = gc$sample_name
gc$sample_name = NULL
gc_fig_width = nrow(gc)*0.5
```

```{r GC_Content_Plot, include=TRUE, fig.align='center', fig.height=sample_correlation_height, fig.width = gc_fig_width, warning=FALSE, message=FALSE}
heatmaply(gc_heat,
          xlab   = 'GC content',
          ylab   = 'Sample',
          k_col  = 2, k_row = 2,
          colors = c('white','darkred'),
          margin = c(150, margin_left, 0, 0),
          Colv   = FALSE)
```




```{r GC_Content_Per sample, include=TRUE, fig.align='center'}
gl = list()
for(sample in unique(lstats$ChIPQC$GC$sample_name)){
    g = lstats$ChIPQC$GC %>%
        dplyr::filter(sample_name %in% sample) %>%
        ggplot(aes(GC, counts)) +
            geom_hex(alpha = .5) +
            xlab('GC content') +
            ylab('Normalized read count') +
            scale_y_log10() +
            ggtitle(sample)
    gl[[sample]] = g
}
```

# Per Sample GC Content Vs Number of Reads {.tabset}

```{r GC_Content_Per_Sample_Plots, include=TRUE, fig.align='center', result='asis', eval=TRUE}
for(sample in names(gl)){
    cat(paste('##',sample,'\n'))
    print(gl[[sample]])
    cat(' \n\n')
}
```

# Read Distribution in Genomic Features

```{r Read_Distribution_in_Genomic_Features, include=TRUE, fig.align='center'}
g = lstats$ChIPQC$Annotation %>%
    mutate(annot = case_when(
      annot == 'None' ~ 'intergenic',
      TRUE ~ as.character(annot)
    )) %>%
    ggplot(aes(x = sample_name, y=freq, fill=annot)) +
        geom_bar(stat='identity') +
        xlab('Sample') +
        ylab('Frequency of reads in genomic annotation') +
        scale_fill_brewer(name = 'Annotation', palette='Set2') +
        theme(axis.text.x = element_text(angle = 45, hjust = 1))

read_distribution_width = length(unique(lstats$ChIPQC$Annotation$sample_name))*0.5
```

```{r Read_Distribution_in_Genomic_Features_Plot, include=TRUE, fig.align='center', fig.width=read_distribution_width}
print(g)
```


---



```{r Read_Distribution_in_Genomic_Features_Header2, include=analysis_ind['Extract_Signal_Annotation'], fig.align='center', eval=analysis_ind['Extract_Signal_Annotation'], results='asis'}
ncat('## Signal profiles around genomic features {.tabset}')
```

```{r Signal_profiles_in_genomic_features, include=TRUE, fig.align='center', eval=analysis_ind['Extract_Signal_Annotation'], results='asis'}
tab = lstats$Extract_Signal_Annotation$profiles
genomic_locations = unique(tab$genomic_location)

genomic_coordinates = lapply(setNames(genomic_locations,genomic_locations), function(x){
    
    v = list()
    if(x == 'splicing_acceptor')
        x = 'splicing_accep'
    if(x %in% c('tss', 'tts','tss_wide','tts_wide', 'splicing_donor', 'splicing_accep')){
        w   = round(width_params[[paste(x, 'width', sep='_')]]/2)
        pos = max(tab$position)
        v$labels = c(-w, 0, +w)
        v$breaks = c(0, floor(pos)/2, pos)
    }
    if(x %in% c('exon','intron','gene')){
        pos = max(tab$position)
        v$labels = c(0,100)
        v$breaks = c(0, pos)
    }
    if(x %in% c('tss_body', 'tts_body')){
        up   = width_params[[paste(x, 'upstream',   sep='_')]]
        down = width_params[[paste(x, 'downstream', sep='_')]]
        pos = max(tab$position)
        v$labels = c(-up,down)
        v$breaks = c(0, pos)
        
    }
    v
})

for(i in seq(genomic_locations)){
  location = genomic_locations[i]
  coordinates = genomic_coordinates[[location]]
  ncat(paste('###',location))
  g = tab %>%
    dplyr::filter(genomic_location==location)  %>%
    ggplot(aes(position, value, color=sample_name)) +
    geom_line() +
    xlab('Relative position') +
    ylab('Signal Value') +
    scale_x_continuous(breaks = coordinates$breaks, 
                       labels = as.character(coordinates$labels)) +
      theme_bw()
  
    if(length(coordinates$breaks) == 3)
        g = g + geom_vline(xintercept = coordinates$breaks[2], linetype=2)
  
  print(g)
  cat('\n')
}
```

---


```{r Peak_Statistics_Header, include=analysis_ind['Peak_Statistics'], eval=analysis_ind['Peak_Statistics'], fig.align='center', results='asis'}
ncat('# Peak Statistics')
```

```{r Peak_Statistics_Header2, include=analysis_ind['Peak_Statistics'], eval=analysis_ind['Peak_Statistics'], fig.align='center', results='asis'}
ncat('## Frequency of reads in peaks')
```

```{r Peak_Statistics_Freq_Reads_In_Peaks, include=FALSE, eval=analysis_ind['Peak_Statistics'], fig.align='center'}
dd = lstats$Peak_Statistics$peaks_sample                          %>%
  dplyr::select(-bed_file, -bw_files, -bam_file)                 %>%
  tidyr::gather(sample_cnt, value, -sample_name, -bam_name, -sample_id, -peak_number, -library, -mapped_total)                         %>%
  mutate(sample_cnt = str_replace(sample_cnt, '.sorted.bam','')) %>%
  mutate(value      = round(value/mapped_total,2))              

dd %>%
  dplyr::filter(bam_name == sample_cnt)                          %>%
  ggplot(aes(bam_name, value, fill=sample_name)) +
  geom_bar(stat='identity', position='dodge') +
  xlab('Peak name')                           +
  ylab('Percentage of reads in peaks') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_discrete('Sample')

number_of_peaks = length(unique(dd$sample_name))*0.5+2
```

```{r Peak_Statistics_Header3, include=analysis_ind['Peak_Statistics'], eval=analysis_ind['Peak_Statistics'], fig.align='center', results='asis', fig.width=number_of_peaks}
print(g)
```

---


```{r Peak_Number_Header, include=analysis_ind['Annotate_Peaks'], eval=analysis_ind['Annotate_Peaks'], fig.align='center', results='asis'}
ncat('# Peak Distribution in Genomic Features')
```

```{r Peak_Number_Header2, include=analysis_ind['Annotate_Peaks'], eval=analysis_ind['Annotate_Peaks'], fig.align='center', results='asis'}
ncat('## Number of peaks per sample in genomic features')
```


```{r Peak_Number_in_Genomic_Features, include=FALSE, eval=analysis_ind['Annotate_Peaks'], fig.align='center'}
g = lstats$Annotate_Peaks    %>%
    mutate(annot = case_when(
      annot == 'none' ~ 'intergenic',
      TRUE ~ as.character(annot)
    )) %>%
  group_by(sample_name) %>%
  mutate(n = sum(counts)) %>%
  arrange(desc(-n)) %>%
  ungroup() %>%
  mutate(sample_name = factor(sample_name, ordered=TRUE, levels=unique(sample_name))) %>%
  ggplot(aes(sample_name, counts, fill=annot)) +
  geom_bar(stat='identity') +
  xlab('Sample name') +
  ylab('Number of peaks') +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_fill_brewer(name='Annotation', palette='Set2')

peak_number_width = length(unique(lstats$Annotate_Peaks$sample_name))*0.5+4
```

```{r Peak_Number_in_Genomic_Features_Plot, include=analysis_ind['Annotate_Peaks'], eval=analysis_ind['Annotate_Peaks'], fig.align='center', fig.width=peak_number_width}
print(g)
```



---
