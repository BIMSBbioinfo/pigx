import csv
import inspect
import os
import sys
import pandas as pd

# ---------------------------------------------------------------------------- #
## Experiment Class
class experiment:
    def __init__(self, config = [], name="sc_rnaseq"):
        """Return an experiment object whose name is *name*"""
        self.config = config
        self.name = name
        
        # contains merged technical replicates
        self.merged_replicates = {}
        
        # sample sheet with sample descriptors
        self.SAMPLE_SHEET = []

    # ------------------------------------------------------------------------ #
    def init_SAMPLE_SHEET(self, PATH_SAMPLE_SHEET):
        """Load the SAMPLE_SHEET as csv and set the *SAMPLE_SHEET* attribute"""
        self.name = PATH_SAMPLE_SHEET
        import pandas as pd
        sample_sheet = pd.read_csv(PATH_SAMPLE_SHEET)
        
        self.SAMPLE_SHEET = sample_sheet
        self.validate_sheet_init()
        
        self.merge_technical_replicates()

    # ------------------------------------------------------------------------ #
    # validates the data in the sample sheet
    # required column names are hardcoded
    def validate_sheet_init(self):
        """Function to validate the sample sheet"""
        print('Validating sample sheet ...')
        sample_sheet = self.SAMPLE_SHEET
        
        
        # Check if the required fields are found in the sample sheet
        # HARDCODED:
        required_fields = set(['sample_name', 'barcode', 'reads', 'method'])
        not_found = required_fields.difference(set(sample_sheet.columns))
        if len(not_found) > 0:
            raise Exception("ERROR: Required field(s) {} could not be found in the sample sheet file '{}'".format(not_found, self.name))
            
        # Check if any of the input files are generated by unsupported single-cell rna-seq methods
        methods = set(self.config['adapter_parameters'].keys())
        for sample_name in sample_sheet['sample_name']:
            
            sample = sample_sheet[sample_sheet.sample_name == sample_name]
            method = set(sample['method'])
            # checks whether all technical replicates have the same protocol
            if len(method) > 1:
                message = message + 'Technical replicates have differing protocols: ' + str(sample_name) + '\n'
            

            # Checks whether the method is allowed
            method = method.difference(methods)
            if len(method) > 0:
                message = 'Sample sheet contains unknown method: ' + str(sample_name) + " : " + str(method) + '\n'
                message = message + 'Supported methods are:' + " ".join(list(methods)) + '\n'
                print(message)
                #sys.exit(message)
        samples = {}
        
        # Check that all fastq files are unique
        files = list(sample_sheet.reads) + list(sample_sheet.barcode)
        if len(files) != len(set(files)):
            raise Exception("ERROR: at least one fastq file is duplicated! The fastq files must be unique.")
            
        # Check that reads files exist
        for index, row in sample_sheet.iterrows():
            filenames = [row.barcode,row.reads]
            for filename in filenames:
                fullpath = os.path.join(self.config['locations']['reads-dir'], filename)
                if not os.path.isfile(fullpath):
                    raise Exception('ERROR: missing reads file: {}'.format(fullpath))

    # ----------------------------------------------------------------------- #
    # pivots the sample_sheet by sample_name to get unique technical replicates
    def merge_technical_replicates(self):
        
        print('Merging technical replicates ...')
        # defines the sample descriptors
        sample_sheet = pd.pivot_table(self.SAMPLE_SHEET, index='sample_name', aggfunc=set)
        
        column_names = set(list(self.SAMPLE_SHEET.columns))
        column_names = column_names.difference(set(['sample_name','reads','barcode']))
        
        # checks whether all technical replicates have the same metadata
        for cname in column_names:
            cid = sample_sheet[cname]
            for i in cid:
                if(len(i) > 1):
                    sys.exit('Technical replicates have different metadata')
        
        self.SAMPLE_SHEET = sample_sheet
    # ----------------------------------------------------------------------- #
    # accessor functions for the merged technical replicates
    def fetch_sample_names(self):
        list(self.merged_replicates.sample_names)
    
    def fetch_field(self, sample_name, field):
        sheet = self.merged_replicates
        list(sheet[sheet.sample_name == sample_name, field])

    def fetch_reads(self, sample_name):
        self.fetch_field(sample_name, 'reads')
        
    def fetch_barcode(self, sample_name):
        self.fetch_field(sample_name, 'barcode')
     
        

