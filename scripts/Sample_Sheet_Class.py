import csv
import inspect

# ---------------------------------------------------------------------------- #
## Experiment Class
class experiment:
    def __init__(self, config = [], name="sc_rnaseq"):
        """Return an experiment object whose name is *name*"""
        self.config = config
        self.name = name
        self.SAMPLE_SHEET = []

    # ------------------------------------------------------------------------ #
    def init_SAMPLE_SHEET(self, PATH_SAMPLE_SHEET):
        """Load the SAMPLE_SHEET as csv and set the *SAMPLE_SHEET* attribute"""
        self.name = PATH_SAMPLE_SHEET
        with open(PATH_SAMPLE_SHEET, 'r') as fp:
            rows =  [row for row in csv.reader(fp, delimiter=',')]
            header = rows[0]; rows = rows[1:]
            SAMPLE_SHEET = [dict(zip(header, row)) for row in rows]
            self.SAMPLE_SHEET = SAMPLE_SHEET
        self.validate_sheet_init()

    # ------------------------------------------------------------------------ #
    def lookup(self, column, predicate, fields=[]):
        """Function for fetching elements from the *SAMPLE_SHEET*"""
        if inspect.isfunction(predicate):
            records = [line for line in self.SAMPLE_SHEET if predicate(line[column])]
        else:
            records = [line for line in self.SAMPLE_SHEET if line[column]==predicate]
        return [record[field] for record in records for field in fields]

    # ------------------------------------------------------------------------ #
    def list_attr(self, attr):
        """Function for listing values for *atrr*"""
        return [line[attr] for line in self.SAMPLE_SHEET]

    # ------------------------------------------------------------------------ #
    def list_rows(self, column, value):
        records = [line for line in self.SAMPLE_SHEET if line[column]==value]
        return records

    # ------------------------------------------------------------------------ #
    def validate_sheet_init(self):
        """Function to validate the sample sheet"""
        sample_sheet = self.SAMPLE_SHEET
        # Check if the required fields are found in the sample sheet
        required_fields = set(['sample_name', 'barcode', 'reads', 'method'])
        not_found = required_fields.difference(set(sample_sheet[0].keys()))
        if len(not_found) > 0:
            raise Exception("ERROR: Required field(s) {} could not be found in the sample sheet file '{}'".format(not_found, self.name))
        # Check if any of the input files are generated by unsupported single-cell rna-seq methods
        methods = set(self.config['adapter_parameters'].keys())
        for sample in sample_sheet:
            method = sample['method']
            if not method in methods:
                message = 'Sample sheet contains unknown method:' + sample + '\n'
                message = message + 'Supported methods are:' + " ".join(list(methods)) + '\n'
                sys.exit(message)
        samples = {}
        # Check that all fastq files are unique
        files = self.list_attr('reads') + self.list_attr('barcode')
        if len(files) != len(set(files)):
            raise Exception("ERROR: at least one fastq file is duplicated! The fastq files must be unique.")
        # Check that reads files exist
        for row in sample_sheet:
            filenames = [row['barcode'], row['reads']]
            for filename in filenames:
                fullpath = os.path.join(self.config['locations']['reads-dir'], filename)
                if not os.path.isfile(fullpath):
                    raise Exception('ERROR: missing reads file: {}'.format(fullpath))

    # ------------------------------------------------------------------------ #
    def merged_bam(self, PATH_MAPPED):
        MERGE_FASTQ_TO_BAM_HASH = {}
        for name in list(set(self.list_attr('sample_name'))):
            reads = self.lookup('sample_name', name, ['reads'])
            for i in range(len(reads)):
                outname = os.path.join(PATH_MAPPED, name, "Fastq_" + str(i)  + ".bam")
                MERGE_FASTQ_TO_BAM_HASH[reads[i]] = outname
        for i in range(len(self.SAMPLE_SHEET)):
            self.SAMPLE_SHEET[i]['Merged_BAM'] = MERGE_FASTQ_TO_BAM_HASH[self.SAMPLE_SHEET[i]['reads']]
